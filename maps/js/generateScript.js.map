{"version":3,"sources":["generateScript.js"],"names":["generateScriptBtn","document","getElementById","addEventListener","exportScript","downloadScriptBtn","copyScriptBtn","defaultScriptFormat","script","startEquationIndex","equationIndex","itemSize","calculateItemSize","iterateStorage","calculateFolderSize","folderSize","item","itemName","itemType","calculateEquationVarSize","varSize","Object","keys","varEquations","length","generateScript","changeScriptFormat","popupBody","querySelector","viewer","remove","createFileEditor","value","readOnly","scriptFormatSelector","insertBefore","querySelectorAll","forEach","el","e","scriptFormat","target","replace","conversionTable","→","⌊","≠","entries","key","RegExp","escape","convertSymbolsToWords","convertWordsToSymbols","selectAllItems","equationVarSize","repeat","generateScriptHelper","baseScript","position","index","homeMenu","getEndOfActivePosition","branching","indexList","itemPosition","generateFileScript","content","generateEquationScript","push","len","i","convertEquationToTIFormat","equation","simplifyEquation","eq","indexOf","eqSegments","split","slice","join","Algebrite","simplify","toString","console","log","userVarNames","userVarDescriptions","varDescriptions","varLength","tiVarNames","startIndex","endIndex","str","menu","conversion","prompt","solution","label","userVarName","userVarDescription","tiVarNameIndex","tiVarName","varEquation","tiVarEquation","substituteVarNames","handleSubscripts","isConstant","lineLength","oldVarNames","newVarNames","varMap","newEquation","handleScientificNotations","nerdamer","text","convertMinusesToNegations","substring","download","filename","element","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","select","execCommand","swal","title","icon","buttons","timer"],"mappings":"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","file":"../../TextReader/js/generateScript.js","sourcesContent":["const generateScriptBtn = document.getElementById(\"generateScriptBtn\");\r\ngenerateScriptBtn.addEventListener(\"click\", exportScript);\r\nconst downloadScriptBtn = document.getElementById(\"downloadScriptBtn\");\r\nconst copyScriptBtn = document.getElementById(\"copyScriptBtn\");\r\nconst defaultScriptFormat = \"sourceCoder\";\r\nlet script;\r\nlet itemSize = calculateItemSize();\r\nlet startEquationIndex;\r\nlet equationIndex;\r\ndownloadScriptBtn.addEventListener(\"click\", () => {\r\n    download(\"TINOTES.txt\", script);\r\n});\r\ncopyScriptBtn.addEventListener(\"click\", () => {\r\n    /* Select the text field */\r\n    document.getElementById(\"viewer\").select();\r\n    /* Copy the text inside the text field */\r\n    document.execCommand(\"copy\");\r\n    swal({\r\n        title: \"File Copied!\",\r\n        icon: \"success\",\r\n        buttons: false,\r\n        timer: 800,\r\n    });\r\n});\r\n\r\nfunction calculateItemSize() {\r\n    let itemSize = 0;\r\n    iterateStorage(function () {\r\n        itemSize += 1;\r\n    });\r\n    itemSize++;\r\n    return itemSize;\r\n}\r\n\r\nfunction calculateFolderSize() {\r\n    let folderSize = 0;\r\n    iterateStorage(function (item, itemName, itemType) {\r\n        if (itemType === \"folder\") {\r\n            folderSize += 1;\r\n        }\r\n    });\r\n    return folderSize;\r\n}\r\n\r\nfunction calculateEquationVarSize() {\r\n    let varSize = 0;\r\n    iterateStorage(function (item, itemName, itemType) {\r\n        if (itemType === \"equation\") {\r\n            varSize += Object.keys(item.varEquations).length;\r\n        }\r\n    });\r\n    return varSize;\r\n}\r\n\r\nfunction exportScript() {\r\n    generateScript();\r\n    changeScriptFormat(defaultScriptFormat);\r\n    const popupBody = document.querySelector('#popup div.modal-body');\r\n    let viewer = document.getElementById(\"viewer\")\r\n    if (viewer) {\r\n        viewer.remove();\r\n    }\r\n    viewer = createFileEditor(\"viewer\");\r\n    viewer.value = script;\r\n    viewer.readOnly = true;\r\n    const scriptFormatSelector = document.getElementById(\"scriptFormatSelector\");\r\n    popupBody.insertBefore(viewer, scriptFormatSelector);\r\n\r\n    // file type options\r\n    document.querySelectorAll('input[name=\"scriptFormat\"]')\r\n        .forEach((el) => {\r\n            el.addEventListener(\"change\", (e) => {\r\n                scriptFormat = e.target.value;\r\n                // console.log('TCL: exportScript -> scriptFormat', scriptFormat);\r\n                changeScriptFormat(scriptFormat);\r\n            })\r\n        });\r\n\r\n\r\n    // process linebreak\r\n    script = script.replace(/\\n/g, \"\\r\\n\");\r\n}\r\n\r\nfunction changeScriptFormat(scriptFormat) {\r\n    // convert between cemetech's SourceCoder format and TI-BASIC's native format\r\n    const conversionTable = {\r\n        // left is TI-BASIC format (used by TI Connect CE), right is SourceCoder format\r\n        \"→\": \"->\",\r\n        \"⌊\": \"|L\", // left side should be a small capital \"L\", but is is technically an unicode \"left floor\"\r\n        \"≠\": \"!=\",\r\n    }\r\n    switch (scriptFormat) {\r\n        case \"sourceCoder\":\r\n            // console.log('TCL: changeScriptFormat -> scriptFormat', scriptFormat);\r\n            Object.entries(conversionTable).forEach(([key, value]) => {\r\n                // console.log('TCL: changeScriptFormat -> value', value);\r\n                // console.log('TCL: changeScriptFormat -> key', key);\r\n                script = script.replace(new RegExp(RegExp.escape(key), \"g\"), value);\r\n            })\r\n            script = convertSymbolsToWords(script);\r\n            break;\r\n        case \"TIBasic\":\r\n            Object.entries(conversionTable).forEach(([key, value]) => {\r\n                // console.log('TCL: changeScriptFormat -> value', value);\r\n                // console.log('TCL: changeScriptFormat -> key', key);\r\n                script = script.replace(new RegExp(RegExp.escape(value), \"g\"), key);\r\n            })\r\n            script = convertWordsToSymbols(script);\r\n            break;\r\n    }\r\n    // console.log('TCL: changeScriptFormat -> script', script);\r\n    // update the viewer with new script\r\n    let viewer = document.getElementById(\"viewer\");\r\n    if (viewer) {\r\n        viewer.value = script;\r\n    }\r\n}\r\n\r\nfunction selectAllItems() {\r\n\r\n}\r\n\r\nfunction generateScript() {\r\n    // selectAllItems();\r\n    itemSize = calculateItemSize(); // reset item size\r\n    const folderSize = calculateFolderSize(); // all folders have \"back\" button which need labels\r\n    const equationVarSize = calculateEquationVarSize();\r\n    startEquationIndex = itemSize + folderSize + 1;\r\n    equationIndex = startEquationIndex;\r\n    script = `0->N\\n1->W\\nLbl S\\n`; // initialize variables\r\n    // initiate equation var list\r\n    if (equationVarSize > 0) {\r\n        script += `{0${\",0\".repeat(equationVarSize - 1)}}->|LV\\n`;\r\n    }\r\n    script += generateScriptHelper(\"home\", 0);\r\n    script += `${baseScript}`;\r\n}\r\n\r\nfunction generateScriptHelper(position, index) {\r\n    // console.log('TCL: generateScriptHelper -> index', index);\r\n    // console.log('TCL: generateScriptHelper -> position', position);\r\n    let homeMenu = `If N=${index}\\nThen\\nN->|LA(W)\\n`;\r\n    homeMenu += `Menu(\"${getEndOfActivePosition(position)}\"`;\r\n    let branching = ``;\r\n    const indexList = [];\r\n    iterateStorage(function (item, itemName, itemType, itemPosition, index) {\r\n        if (itemPosition === position) {\r\n            index++;\r\n            homeMenu += `,\"${getEndOfActivePosition(itemName)}\",${index}`;\r\n            if (itemType === `file`) {\r\n                branching += generateFileScript(index, item.content);\r\n            } else if (itemType === `equation`) {\r\n                branching += generateEquationScript(index, item);\r\n            } else {\r\n                branching += generateScriptHelper(itemName, index);\r\n            }\r\n            indexList.push(index);\r\n        }\r\n    });\r\n    if (position !== \"home\") { // not at home position\r\n        homeMenu += `,\"Back\",${itemSize}`;\r\n        homeMenu += `)\\n`;\r\n        homeMenu += `Lbl ${itemSize}\\n`;\r\n        homeMenu += `W-1->W\\n|LA(W)->N\\nGoto S\\n`;\r\n        itemSize++;\r\n    } else { // at home position\r\n        homeMenu += `)\\n`;\r\n    }\r\n    indexList.forEach(\r\n        (index, len) => {\r\n            homeMenu += `Lbl ${index}\\n`;\r\n            if (len > 0) {\r\n                homeMenu += `If `;\r\n                for (let i = 0; i < len; i++) {\r\n                    if (i > 0) {\r\n                        homeMenu += ` and `;\r\n                    }\r\n                    homeMenu += `N!=${indexList[i]}`;\r\n                }\r\n                homeMenu += `\\n`;\r\n            }\r\n            homeMenu += `${index}->N\\n`;\r\n        }\r\n    )\r\n    homeMenu += `W+1->W\\nEnd\\n`;\r\n    script = `${homeMenu}\\n${branching}`;\r\n    return script;\r\n}\r\n\r\nfunction convertEquationToTIFormat(equation){\r\n    equation = equation\r\n    .replace(/\\^\\s*([2-3]|-1)($|[^0-9])/g, \"^^$1$2\") // superscript for ^2, ^3, and ^-1 powers\r\n    .replace(/\\_/g, \"\"); // no subscript in TI so I can only delete the underscore\r\n    return equation;\r\n}\r\n\r\nfunction simplifyEquation(equation){\r\n    let eq;\r\n    if (equation.indexOf(\"=\") >= 0){\r\n        eqSegments = equation.split(\"=\");\r\n        eq = simplifyEquation(eqSegments[0]) + \"=\" + simplifyEquation(eqSegments.slice(1).join(\"\"));\r\n    } else{\r\n        eq = Algebrite.simplify(equation).toString();\r\n    }\r\n    return eq.replace(/ /g,\"\");\r\n}\r\n\r\nfunction generateEquationScript(index, item) {\r\n    const eq = convertEquationToTIFormat(simplifyEquation(item.equation));\r\n    const varEquations = item.varEquations;\r\n    console.log('TCL: generateEquationScript -> vars', varEquations);\r\n    const userVarNames = Object.keys(varEquations);\r\n    const userVarDescriptions = item.varDescriptions;\r\n    const varLength = userVarNames.length;\r\n    console.log('TCL: generateEquationScript -> varLength', varLength);\r\n    const tiVarNames = [];\r\n    const startIndex = equationIndex;\r\n    const endIndex = equationIndex + varLength;\r\n    for (let i = startIndex; i < endIndex; i++) {\r\n        // LV is a list in ti-basic where \"L\" is the command for denoting\r\n        // a custom list and \"V\" is the name of the list and stands for\r\n        // \"variable\"\r\n        if (startIndex === startEquationIndex) {\r\n            tiVarNames.push(`LV${i - startEquationIndex + 1}`);\r\n        } else {\r\n            tiVarNames.push(`LV${i - startEquationIndex}`);\r\n        }\r\n    }\r\n    console.log('TCL: generateEquationScript -> varNames', userVarNames);\r\n    let str = `If N=${index}\\nThen\\n`;\r\n    // display equation and initiate variables\r\n    str += `Disp \"${eq}\"\\nPause \\n${equationIndex - 1}->L\\nN->|LA(W)\\n`;\r\n    // add menu\r\n    let menu = `Menu(\"Solve For\"`; // start menu\r\n    let conversion = ``;\r\n    let prompt = ``;\r\n    let solution = ``;\r\n    for (let label = startIndex; label < endIndex; label++) {\r\n        const userVarName = userVarNames[label - startIndex];\r\n        const userVarDescription = userVarDescriptions[userVarName];\r\n        let tiVarNameIndex;\r\n        if (startIndex === startEquationIndex) {\r\n            tiVarNameIndex = label - startEquationIndex + 1;\r\n        } else {\r\n            tiVarNameIndex = label - startEquationIndex;\r\n        }\r\n        const tiVarName = `|LV(${tiVarNameIndex})`;\r\n        let varEquation = varEquations[userVarName];\r\n        // remove parentheses around subscripts to ensure valid variable names\r\n        varEquation = handleSubscripts(varEquations[userVarName], false);\r\n        const tiVarEquation = substituteVarNames(varEquation, userVarNames, tiVarNames);\r\n        console.log('TCL: generateEquationScript -> varEquation', varEquation);\r\n        if (isConstant(varEquation)) { // var is a constant\r\n            console.log('TCL: generateEquationScript -> varEquation' + varEquation + ' is finite');\r\n            prompt += `${tiVarEquation}->${tiVarName}\\n`;\r\n        } else { // var is a true variable\r\n            // add menu item (equation variables)\r\n            if (userVarDescription){\r\n                menu += `,\"${userVarName}-${userVarDescription}\",${label}`;\r\n            } else{\r\n                menu += `,\"${userVarName}\",${label}`;\r\n            }\r\n            // prompt values for known variables\r\n            prompt += `If (L!=${label})\\nThen\\nInput \"${userVarName}=\",T\\n`;\r\n            // use T as a temporary variable (input doesn't accept L1(2) syntax)\r\n            prompt += `T->${tiVarName}\\nEnd\\n`;\r\n            // calculate and display the solution\r\n            solution += `If L=${label}\\nThen\\n\"${userVarName}=\"->Str2\\n${tiVarEquation}->V\\nEnd\\n`;\r\n        }\r\n        // convert menu item's label to number\r\n        conversion += `Lbl ${startIndex - 1 + endIndex - label}:L+1->L\\n`;\r\n    }\r\n    menu += `)\\n`; // end menu\r\n    // convert result from number to string for display\r\n    solution += `{0,.5,1->L1\\nVL1->L2\\nMed-Med {Y1}\\nEqu>String({Y1},Str1\\nsub(Str1,1,length(Str1)-3->Str1\\n`;\r\n    // clean up unused variables from the routine\r\n    solution += `DelVar L1DelVar L2DelVar {Y1}\\n`;\r\n    solution += `Disp Str2+Str1\\n`;\r\n    // display a division line at end of solution\r\n    solution += `Disp \"`;\r\n    for (let i = 0; i < lineLength; i++) {\r\n        solution += \"~\";\r\n    }\r\n    solution += `\"\\n`;\r\n    // press 2nd key to go back to parent folder\r\n    let back = `Lbl theta\r\n    0->K\r\n    Repeat K=21 or K=105 or K=45\r\n        getKey->K\r\n    End\r\n    V\r\n    If K=21\r\n    Then\r\n        W-1->W\r\n        |LA(W)->N\r\n        Goto S\r\n    End\r\n    If K=105\r\n    Then\r\n        Input \"\",Str0\r\n        expr(Str0)->V\r\n        Disp V\r\n        Disp \"~~~~~~~~~~~~~~~~~~~~~~~~~~\"\r\n        Goto theta\r\n    End\r\n    If K=45\r\n\tThen\r\n\t\tStop\r\n\tEnd\\n`;\r\n    str += menu + conversion + prompt + solution + back;\r\n    str += \"End\\n\" // pause to let user see solution\r\n    // increase equationIndex\r\n    equationIndex += varLength + 1;\r\n    return str;\r\n}\r\n\r\nfunction substituteVarNames(equation, oldVarNames, newVarNames) {\r\n    const varMap = {};\r\n    for (let i = 0; i < oldVarNames.length; i++) {\r\n        varMap[oldVarNames[i]] = newVarNames[i];\r\n    }\r\n    let newEquation = handleScientificNotations(nerdamer(equation, varMap).text(\"decimals\"));\r\n    // add in sourcecoder notation of a list\r\n    newEquation = newEquation.replace(/LV([0-9]+)/g, \"|LV($1)\");\r\n    newEquation = convertMinusesToNegations(newEquation);\r\n    return newEquation;\r\n}\r\n\r\n// replacing lowercase e with uppercase E for scientific notations\r\n// (TI only accepts uppercase E)\r\nfunction handleScientificNotations(equation){\r\n    const scientificNotationRegex = /([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?)(?:e([+\\-]?\\d+))/g;\r\n    // E for exponentiation is different from E the variable name!!! need a | before E!!!\r\n    return equation.replace(scientificNotationRegex, \"$1|E$2\");\r\n}\r\n\r\nfunction convertMinusesToNegations(eq) {\r\n    if (eq[0] === \"-\") {\r\n        eq = \"~\" + eq.substring(1);\r\n    }\r\n    eq = eq.replace(/\\(\\-/g, \"(~\");\r\n    eq = eq.replace(/\\|E-/g, \"|E~\");\r\n    return eq;\r\n}\r\n\r\nfunction generateFileScript(index, content) {\r\n    return `If N=${index}\\n\"${content}\"->Str1\\n`;\r\n}\r\n\r\n// Source: https://ourcodeworld.com/articles/read/189/how-to-create-a-file-and-generate-a-download-with-javascript-in-the-browser-without-a-server\r\n// Start downloading a file in browser\r\nfunction download(filename, text) {\r\n    var element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n    element.setAttribute('download', filename);\r\n\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n\r\n    element.click();\r\n\r\n    document.body.removeChild(element);\r\n}"]}