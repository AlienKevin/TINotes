{"version":3,"sources":["notebookMenu.js"],"names":["localforage","setDriver","WEBSQL","INDEXEDDB","metaInfo","createInstance","name","toggleBtn","document","querySelector","sidebar","getElementById","notebookMenu","addNotebookBtn","addEventListener","event","preventDefault","classList","toggle","selectedNotebookName","notebookNameList","defaultNotebookName","storeMetaInfo","clear","then","Promise","all","setMetaInfo","loadMetaInfo","getMetaInfo","nameList","selected","key","value","setItem","catch","err","console","log","getItem","storeSelectedNotebook","currentNotebook","getCurrentNotebook","setNotebookInStorage","addNotebook","previousNotebookLabel","notebookNameInput","createItemNameInput","insertAfter","remove","appendChild","focus","e","keyCode","newNotebookName","indexOf","oldNotebookName","createErrorMessage","push","displayNotebookLabel","setSelectedNotebook","notebookName","opts","mergedOpts","storePrevious","storeSelected","oldSelectedNotebook","switchToNewNotebook","add","loadNotebook","addDefaultNotebook","clearSelectedNotebook","getNotebookFromStorage","notebook","Object","keys","forEach","itemName","item","setItemInStorage","updateAtPosition","homePosition","loadNotebookMenu","lastNotebookName","iterate","localStorage","getItemFromStorage","renameNotebook","notebookLabel","innerHTML","replaceElementInArray","renameNotebookInStorage","labelPosition","createElement","setAttribute","textContent","removeNotebookFromStorage","removeNotebook","getAttribute","removedNotebookIndex","previousNotebookName","length","removeElementInArray","clearAllItems","removeItem","countNotebooks","notebookSize","target","contains","window"],"mappings":"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","file":"../../TextReader/js/notebookMenu.js","sourcesContent":["// set drivers for localforage, excluding localstorage\r\nlocalforage.setDriver([localforage.WEBSQL, localforage.INDEXEDDB]);\r\n// separate instance for storing meta info\r\nconst metaInfo = localforage.createInstance({\r\n    name: \"metaInfo\"\r\n});\r\nmetaInfo.setDriver([localforage.WEBSQL, localforage.INDEXEDDB]);\r\n\r\nconst toggleBtn = document.querySelector('#hamburger-icon.toggle-btn');\r\nconst sidebar = document.getElementById(\"sidebar\");\r\nconst notebookMenu = sidebar.querySelector(\"ul\");\r\nconst addNotebookBtn = document.getElementById(\"addNotebookBtn\");\r\ntoggleBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault(); // prevent scrolling up to top\r\n    sidebar.classList.toggle(\"active\");\r\n    toggleBtn.classList.toggle(\"active\");\r\n});\r\nlet notebookNameList = [];\r\nlet selectedNotebookName; // store the selected notebook name\r\nconst defaultNotebookName = \"notebook1\";\r\n\r\nloadMetaInfo();\r\n\r\ncountNotebooks().then((notebookSize) => {\r\n    console.log('TCL: notebookSize', notebookSize);\r\n    if (notebookSize > 0) {\r\n        // load notebooks in storage\r\n        loadNotebookMenu();\r\n    } else {\r\n        // add default notebook\r\n        addDefaultNotebook();\r\n    }\r\n});\r\n\r\n// select notebook on click\r\nnotebookMenu.addEventListener(\"click\", (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains(\"notebook\")) {\r\n        target.classList.add(\"selected\");\r\n        const selectedNotebookName = target.getAttribute(\"data-name\");\r\n        setSelectedNotebook(selectedNotebookName);\r\n    }\r\n});\r\n\r\n// add new notebook\r\naddNotebookBtn.addEventListener(\"click\", () => {\r\n    addNotebook();\r\n})\r\n\r\n// store notebook when window is unloaded\r\nwindow.addEventListener(\"beforeunload\", (e) => {\r\n    return \"\";\r\n});\r\n\r\nfunction storeMetaInfo() {\r\n    return metaInfo.clear().then(() => {\r\n        return Promise.all([\r\n            setMetaInfo(\"notebookNameList\", notebookNameList),\r\n            setMetaInfo(\"selectedNotebookName\", selectedNotebookName)\r\n        ]);\r\n    });\r\n}\r\n\r\nfunction loadMetaInfo() {\r\n    getMetaInfo(\"notebookNameList\").then((nameList) => {\r\n        if (nameList) {\r\n            notebookNameList = nameList;\r\n        }\r\n    });\r\n    getMetaInfo(\"selectedNotebookName\").then((selected) => {\r\n        if (selected) {\r\n            selectedNotebookName = selected;\r\n        }\r\n    });\r\n}\r\n\r\nfunction setMetaInfo(key, value) {\r\n    return metaInfo.setItem(key, value).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getMetaInfo(key) {\r\n    return metaInfo.getItem(key).catch(function (err) {\r\n        console.log(err);\r\n    })\r\n}\r\n\r\nfunction storeSelectedNotebook() {\r\n    const currentNotebook = getCurrentNotebook();\r\n    console.log('TCL: storeSelectedNotebook -> currentNotebook', selectedNotebookName);\r\n    return setNotebookInStorage(selectedNotebookName, currentNotebook);\r\n}\r\n\r\nfunction addNotebook(previousNotebookLabel) {\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    if (previousNotebookLabel) {\r\n        insertAfter(previousNotebookLabel, notebookNameInput);\r\n        previousNotebookLabel.remove();\r\n    } else {\r\n        notebookMenu.appendChild(notebookNameInput);\r\n    }\r\n    notebookNameInput.focus();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                // add to notebook name list\r\n                notebookNameList.push(newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction setSelectedNotebook(notebookName, opts) {\r\n    const defaultOpts = {\r\n        storePrevious: true,\r\n        storeSelected: true,\r\n    };\r\n    const mergedOpts = {\r\n        ...defaultOpts,\r\n        ...opts\r\n    };\r\n    const storePrevious = mergedOpts.storePrevious;\r\n    const storeSelected = mergedOpts.storeSelected;\r\n\r\n    // delete styling of old selected notebook\r\n    const oldSelectedNotebook = notebookMenu.querySelector(`li[data-name=\"${selectedNotebookName}\"]`);\r\n    if (oldSelectedNotebook) {\r\n        console.log('TCL: setSelectedNotebook -> oldSelectedNotebook', oldSelectedNotebook);\r\n        oldSelectedNotebook.classList.remove(\"selected\");\r\n    }\r\n\r\n    // store previous notebook and switch new newly selected notebook\r\n    if (!storePrevious) {\r\n        selectedNotebookName = notebookName;\r\n    }\r\n    if (storeSelected) {\r\n        storeSelectedNotebook().then(() => {\r\n            switchToNewNotebook();\r\n        });\r\n    } else {\r\n        switchToNewNotebook();\r\n    }\r\n\r\n    function switchToNewNotebook() {\r\n        // switch to newly selected notebook\r\n        selectedNotebookName = notebookName;\r\n        const notebookLabel = notebookMenu.querySelector(`li[data-name=\"${notebookName}\"`);\r\n        notebookLabel.classList.add(\"selected\");\r\n        // load the selected notebook\r\n        loadNotebook(notebookName);\r\n    }\r\n}\r\n\r\n// display and store the default notebook\r\nfunction addDefaultNotebook() {\r\n    console.log('TCL: addDefaultNotebook -> addDefaultNotebook');\r\n    // display the default notebook\r\n    displayNotebookLabel(defaultNotebookName);\r\n    notebookNameList.push(defaultNotebookName);\r\n    // set selected notebook to the default one\r\n    setSelectedNotebook(defaultNotebookName, {\r\n        storePrevious: false\r\n    });\r\n}\r\n\r\nfunction loadNotebook(notebookName) {\r\n    clearSelectedNotebook();\r\n    getNotebookFromStorage(notebookName).then((notebook) => {\r\n        if (notebook instanceof Object) {\r\n            Object.keys(notebook).forEach(itemName => {\r\n                const item = notebook[itemName];\r\n                setItemInStorage(itemName, item);\r\n            });\r\n            updateAtPosition(homePosition);\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadNotebookMenu() {\r\n    let lastNotebookName;\r\n    localforage.iterate(function (notebook, notebookName) {\r\n        console.log('TCL: loadNotebookMenu -> notebookName', notebookName);\r\n        // notebookNameList.push(notebookName);\r\n        displayNotebookLabel(notebookName);\r\n        lastNotebookName = notebookName;\r\n    }).then(\r\n        () => {\r\n            console.log('TCL: loadNotebookMenu -> lastNotebookName', lastNotebookName);\r\n            setSelectedNotebook(lastNotebookName, {\r\n                storePrevious: false,\r\n                storeSelected: false\r\n            });\r\n        }\r\n    ).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getCurrentNotebook() {\r\n    const notebook = {};\r\n    Object.keys(localStorage).forEach(key => {\r\n        console.log('TCL: key', key);\r\n        notebook[key] = getItemFromStorage(key);\r\n    })\r\n    return notebook;\r\n}\r\n\r\nfunction renameNotebook(notebookLabel) {\r\n    const oldNotebookName = notebookLabel.innerHTML;\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    insertAfter(notebookLabel, notebookNameInput);\r\n    notebookNameInput.focus();\r\n    notebookLabel.remove();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                replaceElementInArray(notebookNameList, oldNotebookName, newNotebookName);\r\n                renameNotebookInStorage(oldNotebookName, newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction displayNotebookLabel(notebookName, labelPosition) {\r\n    const notebookLabel = document.createElement(\"li\");\r\n    notebookLabel.classList.add(\"item\");\r\n    notebookLabel.classList.add(\"notebook\");\r\n    notebookLabel.setAttribute(\"data-name\", notebookName);\r\n    notebookLabel.textContent = notebookName;\r\n    if (labelPosition) {\r\n        insertAfter(labelPosition, notebookLabel);\r\n    } else {\r\n        notebookMenu.appendChild(notebookLabel);\r\n    }\r\n}\r\n\r\nfunction renameNotebookInStorage(oldNotebookName, newNotebookName) {\r\n    getNotebookFromStorage(oldNotebookName)\r\n        .then((notebook) => setNotebookInStorage(newNotebookName, notebook));\r\n    removeNotebookFromStorage(oldNotebookName);\r\n}\r\n\r\nfunction removeNotebook(notebookLabel) {\r\n    const notebookName = notebookLabel.getAttribute(\"data-name\");\r\n    console.log('TCL: removeNotebook -> notebookName', notebookName);\r\n    removeNotebookFromStorage(notebookName).then(() => {\r\n        console.log(`Doing further operations after removing ${notebookName}...`);\r\n        if (selectedNotebookName === notebookName) {\r\n            clearSelectedNotebook();\r\n            console.log('TCL: removeNotebook -> clearSelectedNotebook');\r\n        }\r\n        const removedNotebookIndex = notebookNameList.indexOf(notebookName);\r\n        let previousNotebookName;\r\n        if (removedNotebookIndex < notebookNameList.length - 1) { // before last\r\n            previousNotebookName = notebookNameList[removedNotebookIndex + 1];\r\n        } else if (removedNotebookIndex > 0) { // last but not the only one\r\n            previousNotebookName = notebookNameList[removedNotebookIndex - 1];\r\n        } else { // last and the only one\r\n            addDefaultNotebook();\r\n        }\r\n        if (previousNotebookName) {\r\n            console.log('TCL: removeNotebook -> previousNotebookName', previousNotebookName);\r\n            setSelectedNotebook(previousNotebookName, {\r\n                storePrevious: false\r\n            });\r\n        }\r\n        removeElementInArray(notebookNameList, notebookName);\r\n        notebookLabel.remove();\r\n    });\r\n}\r\n\r\n// Remove all items from storage and delete all labels!!!\r\nfunction clearSelectedNotebook() {\r\n    clearAllItems();\r\n    localStorage.clear();\r\n}\r\n\r\nfunction removeNotebookFromStorage(notebookName) {\r\n    console.log('TCL: removeNotebookFromStorage -> removeNotebookFromStorage', notebookName);\r\n    return localforage.removeItem(notebookName).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getNotebookFromStorage(notebookName) {\r\n    return localforage.getItem(notebookName);\r\n}\r\n\r\nfunction setNotebookInStorage(notebookName, notebook) {\r\n    return localforage.setItem(notebookName, notebook).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction countNotebooks() {\r\n    return localforage.length();\r\n}"]}