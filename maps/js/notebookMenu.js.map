{"version":3,"sources":["notebookMenu.js"],"names":["toggleBtn","document","querySelector","sidebar","getElementById","notebookMenu","addNotebookBtn","currentNotebookName","addEventListener","event","preventDefault","classList","toggle","defaultNotebookName","notebookNameList","selectedNotebookName","storeSelectedNotebook","currentNotebook","getCurrentNotebook","console","log","setNotebookInStorage","addNotebook","previousNotebookLabel","notebookNameInput","createItemNameInput","insertAfter","remove","appendChild","focus","e","keyCode","newNotebookName","value","indexOf","oldNotebookName","createErrorMessage","displayNotebookLabel","then","clearSelectedNotebook","setSelectedNotebook","notebookName","oldSelectedNotebook","add","loadNotebook","addDefaultNotebook","push","getNotebookFromStorage","notebook","Object","keys","forEach","itemName","item","setItemInStorage","updateAtPosition","homePosition","loadNotebookMenu","lastNotebookName","localforage","iterate","catch","err","localStorage","key","getItemFromStorage","renameNotebook","notebookLabel","innerHTML","replaceElementInArray","renameNotebookInStorage","labelPosition","createElement","setAttribute","textContent","removeNotebookFromStorage","removeNotebook","getAttribute","removedNotebookIndex","previousNotebookName","length","removeElementInArray","clearAllItems","clear","removeItem","getItem","setItem","countNotebooks","notebookSize","target","contains","window"],"mappings":"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","file":"../../TextReader/js/notebookMenu.js","sourcesContent":["const toggleBtn = document.querySelector('#hamburger-icon.toggle-btn');\r\nconst sidebar = document.getElementById(\"sidebar\");\r\nconst notebookMenu = sidebar.querySelector(\"ul\");\r\nconst addNotebookBtn = document.getElementById(\"addNotebookBtn\");\r\ntoggleBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault(); // prevent scrolling up to top\r\n    sidebar.classList.toggle(\"active\");\r\n    toggleBtn.classList.toggle(\"active\");\r\n});\r\nlet currentNotebookName;\r\nconst defaultNotebookName = \"notebook1\";\r\nconst notebookNameList = [];\r\nlet selectedNotebookName = defaultNotebookName; // store the selected notebook name\r\n\r\ncountNotebooks().then((notebookSize) => {\r\n    console.log('TCL: notebookSize', notebookSize);\r\n    if (notebookSize > 0) {\r\n        // load notebooks in storage\r\n        loadNotebookMenu();\r\n    } else {\r\n        // add default notebook\r\n        addDefaultNotebook();\r\n    }\r\n});\r\n\r\n// select notebook on click\r\nnotebookMenu.addEventListener(\"click\", (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains(\"notebook\")) {\r\n        target.classList.add(\"selected\");\r\n        const selectedNotebookName = target.getAttribute(\"data-name\");\r\n        setSelectedNotebook(selectedNotebookName);\r\n    }\r\n});\r\n\r\n// add new notebook\r\naddNotebookBtn.addEventListener(\"click\", () => {\r\n    addNotebook();\r\n})\r\n\r\n// store notebook when window is unloaded\r\nwindow.addEventListener(\"beforeunload\", (e) => {\r\n    storeSelectedNotebook();\r\n})\r\n\r\nfunction storeSelectedNotebook() {\r\n    const currentNotebook = getCurrentNotebook();\r\n\tconsole.log('TCL: storeSelectedNotebook -> currentNotebook', selectedNotebookName);\r\n    return setNotebookInStorage(selectedNotebookName, currentNotebook);\r\n}\r\n\r\nfunction addNotebook(previousNotebookLabel) {\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    if (previousNotebookLabel) {\r\n        insertAfter(previousNotebookLabel, notebookNameInput);\r\n        previousNotebookLabel.remove();\r\n    } else {\r\n        notebookMenu.appendChild(notebookNameInput);\r\n    }\r\n    notebookNameInput.focus();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n\r\n                storeSelectedNotebook().then(() => {\r\n                    // clear current notebook\r\n                    clearSelectedNotebook();\r\n                    // rename selected notebook\r\n                    setSelectedNotebook(newNotebookName);\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction setSelectedNotebook(notebookName) {\r\n    const oldSelectedNotebook = notebookMenu.querySelector(`li[data-name=\"${selectedNotebookName}\"]`);\r\n    if (oldSelectedNotebook) {\r\n        console.log('TCL: setSelectedNotebook -> oldSelectedNotebook', oldSelectedNotebook);\r\n        oldSelectedNotebook.classList.remove(\"selected\");\r\n    }\r\n    // switch to newly selected notebook\r\n    selectedNotebookName = notebookName;\r\n    // store previously selected notebook\r\n    storeSelectedNotebook().then(() => {\r\n        const notebookLabel = notebookMenu.querySelector(`li[data-name=\"${notebookName}\"`);\r\n        notebookLabel.classList.add(\"selected\");\r\n        // load the selected notebook\r\n        loadNotebook(notebookName);\r\n    });\r\n}\r\n\r\n// display and store the default notebook\r\nfunction addDefaultNotebook() {\r\n    // store the default book\r\n    setNotebookInStorage(defaultNotebookName, getCurrentNotebook());\r\n    // display the default notebook\r\n    displayNotebookLabel(defaultNotebookName);\r\n    notebookNameList.push(defaultNotebookName);\r\n    // set selected notebook to the default one\r\n    setSelectedNotebook(defaultNotebookName);\r\n}\r\n\r\nfunction loadNotebook(notebookName) {\r\n    clearSelectedNotebook();\r\n    getNotebookFromStorage(notebookName).then((notebook) => {\r\n        if (notebook instanceof Object) {\r\n            Object.keys(notebook).forEach(itemName => {\r\n                const item = notebook[itemName];\r\n                setItemInStorage(itemName, item);\r\n            });\r\n            updateAtPosition(homePosition);\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadNotebookMenu() {\r\n    let lastNotebookName;\r\n    localforage.iterate(function (notebook, notebookName) {\r\n        console.log('TCL: loadNotebookMenu -> notebookName', notebookName);\r\n        notebookNameList.push(notebookName);\r\n        displayNotebookLabel(notebookName);\r\n        lastNotebookName = notebookName;\r\n    }).then(\r\n        () => {\r\n            console.log('TCL: loadNotebookMenu -> lastNotebookName', lastNotebookName);\r\n            setSelectedNotebook(lastNotebookName);\r\n        }\r\n    ).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getCurrentNotebook() {\r\n    const notebook = {};\r\n    Object.keys(localStorage).forEach(key => {\r\n        console.log('TCL: key', key);\r\n        notebook[key] = getItemFromStorage(key);\r\n    })\r\n    return notebook;\r\n}\r\n\r\nfunction renameNotebook(notebookLabel) {\r\n    const oldNotebookName = notebookLabel.innerHTML;\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    insertAfter(notebookLabel, notebookNameInput);\r\n    notebookNameInput.focus();\r\n    notebookLabel.remove();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                replaceElementInArray(notebookNameList, oldNotebookName, newNotebookName);\r\n                renameNotebookInStorage(oldNotebookName, newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction displayNotebookLabel(notebookName, labelPosition) {\r\n    const notebookLabel = document.createElement(\"li\");\r\n    notebookLabel.classList.add(\"item\");\r\n    notebookLabel.classList.add(\"notebook\");\r\n    notebookLabel.setAttribute(\"data-name\", notebookName);\r\n    notebookLabel.textContent = notebookName;\r\n    if (labelPosition) {\r\n        insertAfter(labelPosition, notebookLabel);\r\n    } else {\r\n        notebookMenu.appendChild(notebookLabel);\r\n    }\r\n}\r\n\r\nfunction renameNotebookInStorage(oldNotebookName, newNotebookName) {\r\n    getNotebookFromStorage(oldNotebookName)\r\n        .then((notebook) => setNotebookInStorage(newNotebookName, notebook));\r\n    removeNotebookFromStorage(oldNotebookName);\r\n}\r\n\r\nfunction removeNotebook(notebookLabel) {\r\n    const notebookName = notebookLabel.getAttribute(\"data-name\");\r\n    console.log('TCL: removeNotebook -> notebookName', notebookName);\r\n    removeNotebookFromStorage(notebookName).then(() => {\r\n        const removedNotebookIndex = notebookNameList.indexOf(notebookName);\r\n        let previousNotebookName;\r\n        if (removedNotebookIndex < notebookNameList.length - 1) { // before last\r\n            previousNotebookName = notebookNameList[removedNotebookIndex + 1];\r\n        } else if (removedNotebookIndex > 0) { // last but not the only one\r\n            previousNotebookName = notebookNameList[removedNotebookIndex - 1];\r\n        }\r\n        if (previousNotebookName) {\r\n            setSelectedNotebook(previousNotebookName);\r\n        }\r\n        removeElementInArray(notebookNameList, notebookName);\r\n        notebookLabel.remove();\r\n        if (selectedNotebookName === notebookName) {\r\n            clearSelectedNotebook();\r\n        }\r\n    });\r\n}\r\n\r\n// Remove all items from storage and delete all labels!!!\r\nfunction clearSelectedNotebook() {\r\n    clearAllItems();\r\n    localStorage.clear();\r\n}\r\n\r\nfunction removeNotebookFromStorage(notebookName) {\r\n    return localforage.removeItem(notebookName).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getNotebookFromStorage(notebookName) {\r\n    return localforage.getItem(notebookName);\r\n}\r\n\r\nfunction setNotebookInStorage(notebookName, notebook) {\r\n    return localforage.setItem(notebookName, notebook).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction countNotebooks() {\r\n    return localforage.length();\r\n}"]}