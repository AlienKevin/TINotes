{"version":3,"sources":["notebookMenu.js"],"names":["toggleBtn","document","querySelector","sidebar","getElementById","notebookMenu","addNotebookBtn","currentNotebookName","addEventListener","event","preventDefault","classList","toggle","defaultNotebookName","notebookNameList","selectedNotebookName","setSelectedNotebook","notebookName","setNotebookInStorage","getCurrentNotebook","oldSelectedNotebook","console","log","remove","add","loadNotebook","addDefaultNotebook","displayNotebookLabel","push","clearSelectedNotebook","getNotebookFromStorage","then","notebook","Object","keys","forEach","itemName","item","setItemInStorage","updateAtPosition","homePosition","loadNotebookMenu","localforage","iterate","selected","catch","err","localStorage","key","getItemFromStorage","renameNotebook","notebookLabel","oldNotebookName","innerHTML","notebookNameInput","createItemNameInput","insertAfter","focus","e","keyCode","newNotebookName","value","indexOf","createErrorMessage","replaceElementInArray","renameNotebookInStorage","labelPosition","createElement","setAttribute","textContent","appendChild","removeNotebookFromStorage","removeNotebook","getAttribute","removedNotebookIndex","removeElementInArray","clearAllItems","clear","removeItem","getItem","setItem","countNotebooks","length","notebookSize","target","contains","window","currentNotebook"],"mappings":"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","file":"../../TextReader/js/notebookMenu.js","sourcesContent":["const toggleBtn = document.querySelector('#hamburger-icon.toggle-btn');\r\nconst sidebar = document.getElementById(\"sidebar\");\r\nconst notebookMenu = sidebar.querySelector(\"ul\");\r\nconst addNotebookBtn = document.getElementById(\"addNotebookBtn\");\r\ntoggleBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault(); // prevent scrolling up to top\r\n    sidebar.classList.toggle(\"active\");\r\n    toggleBtn.classList.toggle(\"active\");\r\n});\r\nlet currentNotebookName;\r\nconst defaultNotebookName = \"notebook1\";\r\nconst notebookNameList = [];\r\nlet selectedNotebookName = defaultNotebookName; // store the selected notebook name\r\n\r\ncountNotebooks().then((notebookSize) => {\r\n    console.log('TCL: notebookSize', notebookSize);\r\n    if (notebookSize > 0) {\r\n        // load notebooks in storage\r\n        loadNotebookMenu();\r\n    } else {\r\n        // add default notebook\r\n        addDefaultNotebook();\r\n    }\r\n});\r\n\r\n// select notebook on click\r\nnotebookMenu.addEventListener(\"click\", (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains(\"notebook\")) {\r\n        target.classList.add(\"selected\");\r\n        const selectedNotebookName = target.getAttribute(\"data-name\");\r\n        setSelectedNotebook(selectedNotebookName);\r\n    }\r\n});\r\n\r\n// store notebook when window is unloaded\r\nwindow.addEventListener(\"beforeunload\", (e) => {\r\n    const currentNotebook = getCurrentNotebook();\r\n    setNotebookInStorage(selectedNotebookName, currentNotebook);\r\n})\r\n\r\nfunction setSelectedNotebook(notebookName) {\r\n    // store previously selected notebook\r\n    setNotebookInStorage(selectedNotebookName, getCurrentNotebook());\r\n\r\n    // switch to newly selected notebook\r\n    selectedNotebookName = notebookName;\r\n    const oldSelectedNotebook = notebookMenu.querySelector(`.selected`);\r\n    if (oldSelectedNotebook) {\r\n        console.log('TCL: setSelectedNotebook -> oldSelectedNotebook', oldSelectedNotebook);\r\n        oldSelectedNotebook.classList.remove(\"selected\");\r\n    }\r\n    const notebookLabel = notebookMenu.querySelector(`li[data-name=\"${notebookName}\"`);\r\n    notebookLabel.classList.add(\"selected\");\r\n    // load the selected notebook\r\n    loadNotebook(notebookName);\r\n}\r\n\r\n// display and store the default notebook\r\nfunction addDefaultNotebook() {\r\n    // store the default book\r\n    setNotebookInStorage(defaultNotebookName, getCurrentNotebook());\r\n    // display the default notebook\r\n    displayNotebookLabel(defaultNotebookName);\r\n    notebookNameList.push(defaultNotebookName);\r\n    // set selected notebook to the default one\r\n    setSelectedNotebook(defaultNotebookName);\r\n}\r\n\r\nfunction loadNotebook(notebookName) {\r\n    clearSelectedNotebook();\r\n    getNotebookFromStorage(notebookName).then((notebook) => {\r\n        Object.keys(notebook).forEach(itemName => {\r\n            const item = notebook[itemName];\r\n            setItemInStorage(itemName, item);\r\n        });\r\n        updateAtPosition(homePosition);\r\n    });\r\n}\r\n\r\nfunction loadNotebookMenu() {\r\n    localforage.iterate(function (notebook, notebookName) {\r\n        notebookNameList.push(notebookName);\r\n        displayNotebookLabel(notebookName);\r\n        if (notebook.selected === true) {\r\n            console.log('TCL: loadNotebookMenu -> notebook', notebook);\r\n            setSelectedNotebook(notebookName);\r\n        }\r\n    }).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getCurrentNotebook() {\r\n    const notebook = {};\r\n    Object.keys(localStorage).forEach(key => {\r\n        console.log('TCL: key', key);\r\n        notebook[key] = getItemFromStorage(key);\r\n    })\r\n    return notebook;\r\n}\r\n\r\nfunction renameNotebook(notebookLabel) {\r\n    const oldNotebookName = notebookLabel.innerHTML;\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    insertAfter(notebookLabel, notebookNameInput);\r\n    notebookNameInput.focus();\r\n    notebookLabel.remove();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                replaceElementInArray(notebookNameList, oldNotebookName, newNotebookName);\r\n                renameNotebookInStorage(oldNotebookName, newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction displayNotebookLabel(notebookName, labelPosition) {\r\n    const notebookLabel = document.createElement(\"li\");\r\n    notebookLabel.classList.add(\"item\");\r\n    notebookLabel.classList.add(\"notebook\");\r\n    notebookLabel.setAttribute(\"data-name\", notebookName);\r\n    notebookLabel.textContent = notebookName;\r\n    if (labelPosition) {\r\n        insertAfter(labelPosition, notebookLabel);\r\n    } else {\r\n        notebookMenu.appendChild(notebookLabel);\r\n    }\r\n}\r\n\r\nfunction renameNotebookInStorage(oldNotebookName, newNotebookName) {\r\n    getNotebookFromStorage(oldNotebookName)\r\n        .then((notebook) => setNotebookInStorage(newNotebookName, notebook));\r\n    removeNotebookFromStorage(oldNotebookName);\r\n}\r\n\r\nfunction removeNotebook(notebookLabel) {\r\n    const notebookName = notebookLabel.getAttribute(\"data-name\");\r\n\tconsole.log('TCL: removeNotebook -> notebookName', notebookName);\r\n    removeNotebookFromStorage(notebookName);\r\n    const removedNotebookIndex = notebookNameList.indexOf(notebookName);\r\n    if (removedNotebookIndex > 0) {\r\n        const previousNotebookName = notebookNameList[removedNotebookIndex - 1];\r\n        setSelectedNotebook(previousNotebookName);\r\n    }\r\n    removeElementInArray(notebookNameList, notebookName);\r\n    notebookLabel.remove();\r\n    if (selectedNotebookName === notebookName) {\r\n        clearSelectedNotebook();\r\n    }\r\n}\r\n\r\n// Remove all items from storage and delete all labels!!!\r\nfunction clearSelectedNotebook() {\r\n    clearAllItems();\r\n    localStorage.clear();\r\n}\r\n\r\nfunction removeNotebookFromStorage(notebookName) {\r\n    localforage.removeItem(notebookName).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getNotebookFromStorage(notebookName) {\r\n    return localforage.getItem(notebookName);\r\n}\r\n\r\nfunction setNotebookInStorage(notebookName, notebook) {\r\n    localforage.setItem(notebookName, notebook).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction countNotebooks() {\r\n    return localforage.length();\r\n}"]}