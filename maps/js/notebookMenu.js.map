{"version":3,"sources":["notebookMenu.js"],"names":["toggleBtn","document","querySelector","sidebar","getElementById","notebookMenu","addNotebookBtn","currentNotebookName","addEventListener","event","preventDefault","classList","toggle","defaultNotebookName","notebookNameList","selectedNotebookName","addNotebook","previousNotebookLabel","notebookNameInput","createItemNameInput","insertAfter","remove","appendChild","focus","e","keyCode","newNotebookName","value","indexOf","oldNotebookName","createErrorMessage","displayNotebookLabel","setSelectedNotebook","notebookName","setNotebookInStorage","getCurrentNotebook","oldSelectedNotebook","console","log","add","loadNotebook","addDefaultNotebook","push","clearSelectedNotebook","getNotebookFromStorage","then","notebook","Object","keys","forEach","itemName","item","setItemInStorage","updateAtPosition","homePosition","loadNotebookMenu","localforage","iterate","selected","catch","err","localStorage","key","getItemFromStorage","renameNotebook","notebookLabel","innerHTML","replaceElementInArray","renameNotebookInStorage","labelPosition","createElement","setAttribute","textContent","removeNotebookFromStorage","removeNotebook","getAttribute","removedNotebookIndex","removeElementInArray","clearAllItems","clear","removeItem","getItem","setItem","countNotebooks","length","notebookSize","target","contains","window","currentNotebook"],"mappings":"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","file":"../../TextReader/js/notebookMenu.js","sourcesContent":["const toggleBtn = document.querySelector('#hamburger-icon.toggle-btn');\r\nconst sidebar = document.getElementById(\"sidebar\");\r\nconst notebookMenu = sidebar.querySelector(\"ul\");\r\nconst addNotebookBtn = document.getElementById(\"addNotebookBtn\");\r\ntoggleBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault(); // prevent scrolling up to top\r\n    sidebar.classList.toggle(\"active\");\r\n    toggleBtn.classList.toggle(\"active\");\r\n});\r\nlet currentNotebookName;\r\nconst defaultNotebookName = \"notebook1\";\r\nconst notebookNameList = [];\r\nlet selectedNotebookName = defaultNotebookName; // store the selected notebook name\r\n\r\ncountNotebooks().then((notebookSize) => {\r\n    console.log('TCL: notebookSize', notebookSize);\r\n    if (notebookSize > 0) {\r\n        // load notebooks in storage\r\n        loadNotebookMenu();\r\n    } else {\r\n        // add default notebook\r\n        addDefaultNotebook();\r\n    }\r\n});\r\n\r\n// select notebook on click\r\nnotebookMenu.addEventListener(\"click\", (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains(\"notebook\")) {\r\n        target.classList.add(\"selected\");\r\n        const selectedNotebookName = target.getAttribute(\"data-name\");\r\n        setSelectedNotebook(selectedNotebookName);\r\n    }\r\n});\r\n\r\n// add new notebook\r\naddNotebookBtn.addEventListener(\"click\", () => {\r\n    addNotebook();\r\n})\r\n\r\n// store notebook when window is unloaded\r\nwindow.addEventListener(\"beforeunload\", (e) => {\r\n    const currentNotebook = getCurrentNotebook();\r\n    setNotebookInStorage(selectedNotebookName, currentNotebook);\r\n})\r\n\r\nfunction addNotebook(previousNotebookLabel) {\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    if (previousNotebookLabel) {\r\n        insertAfter(previousNotebookLabel, notebookNameInput);\r\n        previousNotebookLabel.remove();\r\n    } else{\r\n        notebookMenu.appendChild(notebookNameInput);\r\n    }\r\n    notebookNameInput.focus();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction setSelectedNotebook(notebookName) {\r\n    // store previously selected notebook\r\n    setNotebookInStorage(selectedNotebookName, getCurrentNotebook());\r\n\r\n    // switch to newly selected notebook\r\n    selectedNotebookName = notebookName;\r\n    const oldSelectedNotebook = notebookMenu.querySelector(`.selected`);\r\n    if (oldSelectedNotebook) {\r\n        console.log('TCL: setSelectedNotebook -> oldSelectedNotebook', oldSelectedNotebook);\r\n        oldSelectedNotebook.classList.remove(\"selected\");\r\n    }\r\n    const notebookLabel = notebookMenu.querySelector(`li[data-name=\"${notebookName}\"`);\r\n    notebookLabel.classList.add(\"selected\");\r\n    // load the selected notebook\r\n    loadNotebook(notebookName);\r\n}\r\n\r\n// display and store the default notebook\r\nfunction addDefaultNotebook() {\r\n    // store the default book\r\n    setNotebookInStorage(defaultNotebookName, getCurrentNotebook());\r\n    // display the default notebook\r\n    displayNotebookLabel(defaultNotebookName);\r\n    notebookNameList.push(defaultNotebookName);\r\n    // set selected notebook to the default one\r\n    setSelectedNotebook(defaultNotebookName);\r\n}\r\n\r\nfunction loadNotebook(notebookName) {\r\n    clearSelectedNotebook();\r\n    getNotebookFromStorage(notebookName).then((notebook) => {\r\n        Object.keys(notebook).forEach(itemName => {\r\n            const item = notebook[itemName];\r\n            setItemInStorage(itemName, item);\r\n        });\r\n        updateAtPosition(homePosition);\r\n    });\r\n}\r\n\r\nfunction loadNotebookMenu() {\r\n    localforage.iterate(function (notebook, notebookName) {\r\n        notebookNameList.push(notebookName);\r\n        displayNotebookLabel(notebookName);\r\n        if (notebook.selected === true) {\r\n            console.log('TCL: loadNotebookMenu -> notebook', notebook);\r\n            setSelectedNotebook(notebookName);\r\n        }\r\n    }).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getCurrentNotebook() {\r\n    const notebook = {};\r\n    Object.keys(localStorage).forEach(key => {\r\n        console.log('TCL: key', key);\r\n        notebook[key] = getItemFromStorage(key);\r\n    })\r\n    return notebook;\r\n}\r\n\r\nfunction renameNotebook(notebookLabel) {\r\n    const oldNotebookName = notebookLabel.innerHTML;\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    insertAfter(notebookLabel, notebookNameInput);\r\n    notebookNameInput.focus();\r\n    notebookLabel.remove();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                replaceElementInArray(notebookNameList, oldNotebookName, newNotebookName);\r\n                renameNotebookInStorage(oldNotebookName, newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction displayNotebookLabel(notebookName, labelPosition) {\r\n    const notebookLabel = document.createElement(\"li\");\r\n    notebookLabel.classList.add(\"item\");\r\n    notebookLabel.classList.add(\"notebook\");\r\n    notebookLabel.setAttribute(\"data-name\", notebookName);\r\n    notebookLabel.textContent = notebookName;\r\n    if (labelPosition) {\r\n        insertAfter(labelPosition, notebookLabel);\r\n    } else {\r\n        notebookMenu.appendChild(notebookLabel);\r\n    }\r\n}\r\n\r\nfunction renameNotebookInStorage(oldNotebookName, newNotebookName) {\r\n    getNotebookFromStorage(oldNotebookName)\r\n        .then((notebook) => setNotebookInStorage(newNotebookName, notebook));\r\n    removeNotebookFromStorage(oldNotebookName);\r\n}\r\n\r\nfunction removeNotebook(notebookLabel) {\r\n    const notebookName = notebookLabel.getAttribute(\"data-name\");\r\n    console.log('TCL: removeNotebook -> notebookName', notebookName);\r\n    removeNotebookFromStorage(notebookName);\r\n    const removedNotebookIndex = notebookNameList.indexOf(notebookName);\r\n    if (removedNotebookIndex > 0) {\r\n        const previousNotebookName = notebookNameList[removedNotebookIndex - 1];\r\n        setSelectedNotebook(previousNotebookName);\r\n    }\r\n    removeElementInArray(notebookNameList, notebookName);\r\n    notebookLabel.remove();\r\n    if (selectedNotebookName === notebookName) {\r\n        clearSelectedNotebook();\r\n    }\r\n}\r\n\r\n// Remove all items from storage and delete all labels!!!\r\nfunction clearSelectedNotebook() {\r\n    clearAllItems();\r\n    localStorage.clear();\r\n}\r\n\r\nfunction removeNotebookFromStorage(notebookName) {\r\n    localforage.removeItem(notebookName).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getNotebookFromStorage(notebookName) {\r\n    return localforage.getItem(notebookName);\r\n}\r\n\r\nfunction setNotebookInStorage(notebookName, notebook) {\r\n    localforage.setItem(notebookName, notebook).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction countNotebooks() {\r\n    return localforage.length();\r\n}"]}