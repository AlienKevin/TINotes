{"version":3,"sources":["notebookMenu.js"],"names":["toggleBtn","document","querySelector","sidebar","getElementById","notebookMenu","addNotebookBtn","addEventListener","event","preventDefault","classList","toggle","notebookNameList","selectedNotebookName","defaultNotebookName","storeSelectedNotebook","currentNotebook","getCurrentNotebook","console","log","setNotebookInStorage","addNotebook","previousNotebookLabel","notebookNameInput","createItemNameInput","insertAfter","remove","appendChild","focus","e","keyCode","newNotebookName","value","indexOf","oldNotebookName","createErrorMessage","displayNotebookLabel","setSelectedNotebook","notebookName","storePreviousNotebook","oldSelectedNotebook","then","add","loadNotebook","addDefaultNotebook","push","clearSelectedNotebook","getNotebookFromStorage","notebook","Object","keys","forEach","itemName","item","setItemInStorage","updateAtPosition","homePosition","loadNotebookMenu","lastNotebookName","localforage","iterate","catch","err","localStorage","key","getItemFromStorage","renameNotebook","notebookLabel","innerHTML","replaceElementInArray","renameNotebookInStorage","labelPosition","createElement","setAttribute","textContent","removeNotebookFromStorage","removeNotebook","getAttribute","removedNotebookIndex","previousNotebookName","length","removeElementInArray","clearAllItems","clear","removeItem","getItem","setItem","countNotebooks","notebookSize","target","contains","window"],"mappings":"AAAA,MAAMA,UAAYC,SAASC,cAAc,8BACnCC,QAAUF,SAASG,eAAe,WAClCC,aAAeF,QAAQD,cAAc,MACrCI,eAAiBL,SAASG,eAAe,kBAC/CJ,UAAUO,iBAAiB,QAAUC,IACjCA,EAAMC,iBACNN,QAAQO,UAAUC,OAAO,UACzBX,UAAUU,UAAUC,OAAO,YAE/B,MAAMC,oBACN,IAAIC,qBACJ,MAAMC,oBAAsB,YAgC5B,SAASC,wBACL,MAAMC,EAAkBC,qBAExB,OADAC,QAAQC,IAAI,gDAAiDN,sBACtDO,qBAAqBP,qBAAsBG,GAGtD,SAASK,YAAYC,GACjB,MAAMC,EAAoBC,oBAAoB,YAC1CF,GACAG,YAAYH,EAAuBC,GACnCD,EAAsBI,UAEtBrB,aAAasB,YAAYJ,GAE7BA,EAAkBK,QAClBL,EAAkBhB,iBAAiB,WAAasB,IAC5C,GAAiB,IAAbA,EAAEC,QAAe,CACjB,MAAMC,EAAkBR,EAAkBS,MACtCpB,iBAAiBqB,QAAQF,IAAoB,GAAKA,IAAoBG,gBACtEC,mBAAmBZ,EACf,6BAEJa,qBAAqBL,EAAiBR,GAEtCA,EAAkBG,SAElBW,oBAAoBN,OAMpC,SAASM,oBAAoBC,EAAcC,GAAwB,GAC/D,MAAMC,EAAsBnC,aAAaH,+BAA+BW,0BACpE2B,IACAtB,QAAQC,IAAI,kDAAmDqB,GAC/DA,EAAoB9B,UAAUgB,OAAO,aAEpCa,IACD1B,qBAAuByB,GAG3BvB,wBAAwB0B,KAAK,KAEzB5B,qBAAuByB,EACDjC,aAAaH,+BAA+BoC,MACpD5B,UAAUgC,IAAI,YAE5BC,aAAaL,KAKrB,SAASM,qBACR1B,QAAQC,IAAI,iDAETiB,qBAAqBtB,qBACrBF,iBAAiBiC,KAAK/B,qBAEtBuB,oBAAoBvB,qBAAqB,GAG7C,SAAS6B,aAAaL,GAClBQ,wBACAC,uBAAuBT,GAAcG,KAAMO,IACnCA,aAAoBC,SACpBA,OAAOC,KAAKF,GAAUG,QAAQC,IAC1B,MAAMC,EAAOL,EAASI,GACtBE,iBAAiBF,EAAUC,KAE/BE,iBAAiBC,iBAK7B,SAASC,mBACL,IAAIC,EACJC,YAAYC,QAAQ,SAAUZ,EAAUV,GACpCpB,QAAQC,IAAI,wCAAyCmB,GACrD1B,iBAAiBiC,KAAKP,GACtBF,qBAAqBE,GACrBoB,EAAmBpB,IACpBG,KACC,KACIvB,QAAQC,IAAI,4CAA6CuC,GACzDrB,oBAAoBqB,GAAkB,KAE5CG,MAAM,SAAUC,GACd5C,QAAQC,IAAI2C,KAIpB,SAAS7C,qBACL,MAAM+B,KAKN,OAJAC,OAAOC,KAAKa,cAAcZ,QAAQa,IAC9B9C,QAAQC,IAAI,WAAY6C,GACxBhB,EAASgB,GAAOC,mBAAmBD,KAEhChB,EAGX,SAASkB,eAAeC,GACpB,MAAMjC,EAAkBiC,EAAcC,UAChC7C,EAAoBC,oBAAoB,YAC9CC,YAAY0C,EAAe5C,GAC3BA,EAAkBK,QAClBuC,EAAczC,SACdH,EAAkBhB,iBAAiB,WAAasB,IAC5C,GAAiB,IAAbA,EAAEC,QAAe,CACjB,MAAMC,EAAkBR,EAAkBS,MACtCpB,iBAAiBqB,QAAQF,IAAoB,GAAKA,IAAoBG,EACtEC,mBAAmBZ,EACf,6BAEJ8C,sBAAsBzD,iBAAkBsB,EAAiBH,GACzDuC,wBAAwBpC,EAAiBH,GACzCK,qBAAqBL,EAAiBR,GAEtCA,EAAkBG,SAElBW,oBAAoBN,OAMpC,SAASK,qBAAqBE,EAAciC,GACxC,MAAMJ,EAAgBlE,SAASuE,cAAc,MAC7CL,EAAczD,UAAUgC,IAAI,QAC5ByB,EAAczD,UAAUgC,IAAI,YAC5ByB,EAAcM,aAAa,YAAanC,GACxC6B,EAAcO,YAAcpC,EACxBiC,EACA9C,YAAY8C,EAAeJ,GAE3B9D,aAAasB,YAAYwC,GAIjC,SAASG,wBAAwBpC,EAAiBH,GAC9CgB,uBAAuBb,GAClBO,KAAMO,GAAa5B,qBAAqBW,EAAiBiB,IAC9D2B,0BAA0BzC,GAG9B,SAAS0C,eAAeT,GACpB,MAAM7B,EAAe6B,EAAcU,aAAa,aAChD3D,QAAQC,IAAI,sCAAuCmB,GACnDqC,0BAA0BrC,GAAcG,KAAK,KACzCvB,QAAQC,+CAA+CmB,QACnDzB,uBAAyByB,IACzBQ,wBACA5B,QAAQC,IAAI,iDAEhB,MAAM2D,EAAuBlE,iBAAiBqB,QAAQK,GACtD,IAAIyC,EACAD,EAAuBlE,iBAAiBoE,OAAS,EACjDD,EAAuBnE,iBAAiBkE,EAAuB,GACxDA,EAAuB,EAC9BC,EAAuBnE,iBAAiBkE,EAAuB,GAE/DlC,qBAEAmC,IACA7D,QAAQC,IAAI,8CAA+C4D,GAC3D1C,oBAAoB0C,GAAsB,IAE9CE,qBAAqBrE,iBAAkB0B,GACvC6B,EAAczC,WAKtB,SAASoB,wBACLoC,gBACAnB,aAAaoB,QAGjB,SAASR,0BAA0BrC,GAE/B,OADApB,QAAQC,IAAI,8DAA+DmB,GACpEqB,YAAYyB,WAAW9C,GAAcuB,MAAM,SAAUC,GACxD5C,QAAQC,IAAI2C,KAIpB,SAASf,uBAAuBT,GAC5B,OAAOqB,YAAY0B,QAAQ/C,GAG/B,SAASlB,qBAAqBkB,EAAcU,GACxC,OAAOW,YAAY2B,QAAQhD,EAAcU,GAAUa,MAAMC,IACrD5C,QAAQC,IAAI2C,KAIpB,SAASyB,iBACL,OAAO5B,YAAYqB,SAnOvBO,iBAAiB9C,KAAM+C,IACnBtE,QAAQC,IAAI,oBAAqBqE,GAC7BA,EAAe,EAEf/B,mBAGAb,uBAKRvC,aAAaE,iBAAiB,QAAUsB,IACpC,MAAM4D,EAAS5D,EAAE4D,OACjB,GAAIA,EAAO/E,UAAUgF,SAAS,YAAa,CACvCD,EAAO/E,UAAUgC,IAAI,YAErBL,oBAD6BoD,EAAOZ,aAAa,iBAMzDvE,eAAeC,iBAAiB,QAAS,KACrCc,gBAIJsE,OAAOpF,iBAAiB,eAAiBsB,IACrCd","file":"../../TextReader/js/notebookMenu.js","sourcesContent":["const toggleBtn = document.querySelector('#hamburger-icon.toggle-btn');\r\nconst sidebar = document.getElementById(\"sidebar\");\r\nconst notebookMenu = sidebar.querySelector(\"ul\");\r\nconst addNotebookBtn = document.getElementById(\"addNotebookBtn\");\r\ntoggleBtn.addEventListener(\"click\", (event) => {\r\n    event.preventDefault(); // prevent scrolling up to top\r\n    sidebar.classList.toggle(\"active\");\r\n    toggleBtn.classList.toggle(\"active\");\r\n});\r\nconst notebookNameList = [];\r\nlet selectedNotebookName; // store the selected notebook name\r\nconst defaultNotebookName = \"notebook1\";\r\ncountNotebooks().then((notebookSize) => {\r\n    console.log('TCL: notebookSize', notebookSize);\r\n    if (notebookSize > 0) {\r\n        // load notebooks in storage\r\n        loadNotebookMenu();\r\n    } else {\r\n        // add default notebook\r\n        addDefaultNotebook();\r\n    }\r\n});\r\n\r\n// select notebook on click\r\nnotebookMenu.addEventListener(\"click\", (e) => {\r\n    const target = e.target;\r\n    if (target.classList.contains(\"notebook\")) {\r\n        target.classList.add(\"selected\");\r\n        const selectedNotebookName = target.getAttribute(\"data-name\");\r\n        setSelectedNotebook(selectedNotebookName);\r\n    }\r\n});\r\n\r\n// add new notebook\r\naddNotebookBtn.addEventListener(\"click\", () => {\r\n    addNotebook();\r\n})\r\n\r\n// store notebook when window is unloaded\r\nwindow.addEventListener(\"beforeunload\", (e) => {\r\n    storeSelectedNotebook();\r\n})\r\n\r\nfunction storeSelectedNotebook() {\r\n    const currentNotebook = getCurrentNotebook();\r\n    console.log('TCL: storeSelectedNotebook -> currentNotebook', selectedNotebookName);\r\n    return setNotebookInStorage(selectedNotebookName, currentNotebook);\r\n}\r\n\r\nfunction addNotebook(previousNotebookLabel) {\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    if (previousNotebookLabel) {\r\n        insertAfter(previousNotebookLabel, notebookNameInput);\r\n        previousNotebookLabel.remove();\r\n    } else {\r\n        notebookMenu.appendChild(notebookNameInput);\r\n    }\r\n    notebookNameInput.focus();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction setSelectedNotebook(notebookName, storePreviousNotebook = true) {\r\n    const oldSelectedNotebook = notebookMenu.querySelector(`li[data-name=\"${selectedNotebookName}\"]`);\r\n    if (oldSelectedNotebook) {\r\n        console.log('TCL: setSelectedNotebook -> oldSelectedNotebook', oldSelectedNotebook);\r\n        oldSelectedNotebook.classList.remove(\"selected\");\r\n    }\r\n    if (!storePreviousNotebook) {\r\n        selectedNotebookName = notebookName;\r\n    }\r\n    // store previously selected notebook\r\n    storeSelectedNotebook().then(() => {\r\n        // switch to newly selected notebook\r\n        selectedNotebookName = notebookName;\r\n        const notebookLabel = notebookMenu.querySelector(`li[data-name=\"${notebookName}\"`);\r\n        notebookLabel.classList.add(\"selected\");\r\n        // load the selected notebook\r\n        loadNotebook(notebookName);\r\n    });\r\n}\r\n\r\n// display and store the default notebook\r\nfunction addDefaultNotebook() {\r\n\tconsole.log('TCL: addDefaultNotebook -> addDefaultNotebook');\r\n    // display the default notebook\r\n    displayNotebookLabel(defaultNotebookName);\r\n    notebookNameList.push(defaultNotebookName);\r\n    // set selected notebook to the default one\r\n    setSelectedNotebook(defaultNotebookName, false);\r\n}\r\n\r\nfunction loadNotebook(notebookName) {\r\n    clearSelectedNotebook();\r\n    getNotebookFromStorage(notebookName).then((notebook) => {\r\n        if (notebook instanceof Object) {\r\n            Object.keys(notebook).forEach(itemName => {\r\n                const item = notebook[itemName];\r\n                setItemInStorage(itemName, item);\r\n            });\r\n            updateAtPosition(homePosition);\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadNotebookMenu() {\r\n    let lastNotebookName;\r\n    localforage.iterate(function (notebook, notebookName) {\r\n        console.log('TCL: loadNotebookMenu -> notebookName', notebookName);\r\n        notebookNameList.push(notebookName);\r\n        displayNotebookLabel(notebookName);\r\n        lastNotebookName = notebookName;\r\n    }).then(\r\n        () => {\r\n            console.log('TCL: loadNotebookMenu -> lastNotebookName', lastNotebookName);\r\n            setSelectedNotebook(lastNotebookName, false);\r\n        }\r\n    ).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getCurrentNotebook() {\r\n    const notebook = {};\r\n    Object.keys(localStorage).forEach(key => {\r\n        console.log('TCL: key', key);\r\n        notebook[key] = getItemFromStorage(key);\r\n    })\r\n    return notebook;\r\n}\r\n\r\nfunction renameNotebook(notebookLabel) {\r\n    const oldNotebookName = notebookLabel.innerHTML;\r\n    const notebookNameInput = createItemNameInput(\"notebook\");\r\n    insertAfter(notebookLabel, notebookNameInput);\r\n    notebookNameInput.focus();\r\n    notebookLabel.remove();\r\n    notebookNameInput.addEventListener(\"keypress\", (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const newNotebookName = notebookNameInput.value;\r\n            if (notebookNameList.indexOf(newNotebookName) >= 0 && newNotebookName !== oldNotebookName) { // repeated name\r\n                createErrorMessage(notebookNameInput,\r\n                    `Duplicated notebook name`);\r\n            } else {\r\n                replaceElementInArray(notebookNameList, oldNotebookName, newNotebookName);\r\n                renameNotebookInStorage(oldNotebookName, newNotebookName);\r\n                displayNotebookLabel(newNotebookName, notebookNameInput);\r\n                // remove item name input\r\n                notebookNameInput.remove();\r\n                // rename selected notebook\r\n                setSelectedNotebook(newNotebookName);\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction displayNotebookLabel(notebookName, labelPosition) {\r\n    const notebookLabel = document.createElement(\"li\");\r\n    notebookLabel.classList.add(\"item\");\r\n    notebookLabel.classList.add(\"notebook\");\r\n    notebookLabel.setAttribute(\"data-name\", notebookName);\r\n    notebookLabel.textContent = notebookName;\r\n    if (labelPosition) {\r\n        insertAfter(labelPosition, notebookLabel);\r\n    } else {\r\n        notebookMenu.appendChild(notebookLabel);\r\n    }\r\n}\r\n\r\nfunction renameNotebookInStorage(oldNotebookName, newNotebookName) {\r\n    getNotebookFromStorage(oldNotebookName)\r\n        .then((notebook) => setNotebookInStorage(newNotebookName, notebook));\r\n    removeNotebookFromStorage(oldNotebookName);\r\n}\r\n\r\nfunction removeNotebook(notebookLabel) {\r\n    const notebookName = notebookLabel.getAttribute(\"data-name\");\r\n    console.log('TCL: removeNotebook -> notebookName', notebookName);\r\n    removeNotebookFromStorage(notebookName).then(() => {\r\n        console.log(`Doing further operations after removing ${notebookName}...`);\r\n        if (selectedNotebookName === notebookName) {\r\n            clearSelectedNotebook();\r\n            console.log('TCL: removeNotebook -> clearSelectedNotebook');\r\n        }\r\n        const removedNotebookIndex = notebookNameList.indexOf(notebookName);\r\n        let previousNotebookName;\r\n        if (removedNotebookIndex < notebookNameList.length - 1) { // before last\r\n            previousNotebookName = notebookNameList[removedNotebookIndex + 1];\r\n        } else if (removedNotebookIndex > 0) { // last but not the only one\r\n            previousNotebookName = notebookNameList[removedNotebookIndex - 1];\r\n        } else{ // last and the only one\r\n            addDefaultNotebook();\r\n        }\r\n        if (previousNotebookName) {\r\n            console.log('TCL: removeNotebook -> previousNotebookName', previousNotebookName);\r\n            setSelectedNotebook(previousNotebookName, false);\r\n        }\r\n        removeElementInArray(notebookNameList, notebookName);\r\n        notebookLabel.remove();\r\n    });\r\n}\r\n\r\n// Remove all items from storage and delete all labels!!!\r\nfunction clearSelectedNotebook() {\r\n    clearAllItems();\r\n    localStorage.clear();\r\n}\r\n\r\nfunction removeNotebookFromStorage(notebookName) {\r\n    console.log('TCL: removeNotebookFromStorage -> removeNotebookFromStorage', notebookName);\r\n    return localforage.removeItem(notebookName).catch(function (err) {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction getNotebookFromStorage(notebookName) {\r\n    return localforage.getItem(notebookName);\r\n}\r\n\r\nfunction setNotebookInStorage(notebookName, notebook) {\r\n    return localforage.setItem(notebookName, notebook).catch(err => {\r\n        console.log(err);\r\n    });\r\n}\r\n\r\nfunction countNotebooks() {\r\n    return localforage.length();\r\n}"]}