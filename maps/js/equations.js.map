{"version":3,"sources":["equations.js"],"names":["newEquationBtn","document","getElementById","eqLength","mainInput","varInputs","guppyBlacklist","warningTimerId","displayEquation","position","eqName","eqInfo","console","log","equationField","remove","getAttribute","openEquationEditField","storeEquation","equation","getMainEquation","varEquations","getVarEquations","varDescriptions","getVarDescriptions","constants","getConstants","setItemInStorage","Object","keys","forEach","variable","isConstant","input","engine","get_content","Array","from","getElementsByClassName","value","querySelector","getEquation","guppyOSK","GuppyOSK","Guppy","use_osk","goto_tab","attach","addEventListener","createMenuItem","Mousetrap","bind","e","click","equationTextToSymbol","absolutevalue(","squareroot(","neg(","convertTextToSymbol","textEquation","entries","text","symbol","replace","RegExp","escape","convertSymbolToText","symbolEquation","inGuppyPlainTextFormat","detachWarning","eqInput","setTimeout","AttachWarning","Error","varName","inputContent","handleSubscripts","convertToExponential","nerdamer","evaluate","isFinite","exponential","Number","toExponential","exponent","toUpperCase","substring","indexOf","Math","abs","getExponent","handleVarNameSubscripts","AddParenthesesAroundVarName","vars","variables","searchVarNames","filter","varMap","searchVarName","varNameWithParen","AddParentheses","startIndex","underscoreIndex","openParenIndex","lastIndexOf","subscriptStartIndex","subscriptEndIndex","closeParenIndex","findClosingBracketMatchIndex","length","charAt","insertSubstring","deleteSubstring","subscript","i","char","element","parentNode","insertAdjacentHTML","warningSign","clearTimeout","setMainEquation","setInputEquation","end","activate","render","processedEquation","import_text","sel_all","sel_clear","configureInput","configure","event","focusedObj","focused","removeExtraGuppyOSKTabs","scrollIntoView","behavior","block","inline","configureGuppyHelp","additionalBlacklist","querySelectorAll","row","symbolName","innerText","createEquationEditor","editor","createElement","id","classList","add","setAttribute","cell","letter","innerHTML","values","conversionTable","closest","funcName","undefined","system","appendChild","insertAfter","getEquationVars","deleteStrInArray","createVarTable","varInfo","eq","varTable","tableStr","createNewRowHTML","loadVarEquations","renderEquationVars","loadVarDescriptions","rows","rowVars","push","emptyXML","mainContent","test","tbody","getElementsByTagName","newRow","solveEquation","rowVar","solution","solve","finalResult","elements","some","isImaginary","gte","startsWith","Algebrite","simplify","toString","result","Doc","render_all","guppyDoc","varDescriptionLength","lineLength","varEquation","varInput","constant","import_xml"],"mappings":"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","file":"../../TextReader/js/equations.js","sourcesContent":["// button for creating a new equation\r\nconst newEquationBtn = document.getElementById(\"newEquationBtn\");\r\nconst eqLength = 20;\r\nlet mainInput;\r\nlet varInputs = {};\r\nconst guppyBlacklist = [\r\n    // some disallowed functions\r\n    \"norm\", \"utf8\", \"text\", \"floor\", \"eval\", \"integral\", \"defintegral\", \"derivative\", \"summation\", \"product\", \"root\", \"vector\", \"point\", \"matrix\",\r\n    // infinity is not allowed\r\n    \"infinity\",\r\n    // no emojis\r\n    \"banana\", \"pineapple\", \"kiwi\", \"mango\",\r\n    // no hyperbolic trigs\r\n    \"sinh\", \"cosh\", \"tanh\",\r\n    // inequalities\r\n    \"<=\", \"!=\", \">=\", \">\", \"<\", \"!=\",\r\n    // some disallowed greek letters\r\n    \"zeta\", \"eta\", \"iota\", \"kappa\", \"nu\", \"xi\", \"upsilon\", \"chi\", \"psi\", \"omega\", \"Theta\", \"Lambda\", \"Xi\", \"Pi\", \"Psi\",\r\n];\r\nlet warningTimerId; // timer id for settimeout of warning sign\r\n// Add guppyOSK mobile keyboard\r\nguppyOSK = new GuppyOSK();\r\nGuppy.use_osk(new GuppyOSK({\r\n    \"goto_tab\": \"arithmetic\",\r\n    \"attach\": \"focus\"\r\n}));\r\nnewEquationBtn.addEventListener(\"click\", () => {\r\n    createMenuItem(\"equation\");\r\n})\r\nMousetrap.bind(\"shift+e\", (e) => { // keyboard shortcut\r\n    newEquationBtn.click();\r\n    return false;\r\n});\r\n\r\nfunction displayEquation(position, eqName, eqInfo) {\r\n    console.log(\"displaying equation...\");\r\n    // toggle file editor\r\n    const equationField = document.getElementById(\"editField\");\r\n    if (equationField) {\r\n        equationField.remove();\r\n        const clickedItemName = equationField.getAttribute(\"data-item\");\r\n        if (clickedItemName !== eqName) { // not the same item\r\n            displayEquation(position, eqName, eqInfo);\r\n        }\r\n    } else {\r\n        openEquationEditField(eqName, eqInfo, position);\r\n    }\r\n}\r\n\r\nfunction storeEquation(eqName, eqInfo) {\r\n    // storing equation in plain text\r\n    eqInfo.equation = getMainEquation(false);\r\n\r\n    // storing variable equations\r\n    eqInfo.varEquations = getVarEquations();\r\n\r\n    // storing variable descriptions\r\n    eqInfo.varDescriptions = getVarDescriptions();\r\n\r\n    // storing constants in XML\r\n    eqInfo.constants = getConstants();\r\n\r\n    // load all equation info into storage\r\n    setItemInStorage(eqName, eqInfo);\r\n}\r\n\r\nfunction getConstants() {\r\n    const varEquations = getVarEquations();\r\n    const constants = {};\r\n    Object.keys(varEquations).forEach(variable => {\r\n        const equation = varEquations[variable];\r\n        if (isConstant(equation)) {\r\n            const input = varInputs[variable];\r\n            constants[variable] = input.engine.get_content(\"xml\");\r\n        }\r\n    });\r\n    return constants;\r\n}\r\n\r\nfunction getVarDescriptions() {\r\n    const varDescriptions = {};\r\n    Array.from(document.getElementsByClassName(\"descriptionInput\")).forEach((input) => {\r\n        const variable = input.getAttribute(\"data-var\");\r\n        if (variable) {\r\n            varDescriptions[variable] = input.value;\r\n        }\r\n    });\r\n    return varDescriptions;\r\n}\r\n\r\nfunction getVarEquations() {\r\n    const varEquations = {};\r\n    Object.keys(varInputs).forEach((variable) => {\r\n        // only store equtions that are open in editField\r\n        if (document.querySelector(`.eqInput[data-var=\"${variable}\"]`)) {\r\n            varEquations[variable] = getEquation(varInputs[variable], variable, true);\r\n        }\r\n    });\r\n    return varEquations;\r\n}\r\n\r\nconst equationTextToSymbol = {\r\n    \"absolutevalue(\": \"abs(\",\r\n    \"squareroot(\": \"sqrt(\",\r\n    \"neg(\": \"-(\",\r\n}\r\n\r\nfunction convertTextToSymbol(textEquation) {\r\n    Object.entries(equationTextToSymbol).forEach(([text, symbol]) => {\r\n        textEquation = textEquation.replace(new RegExp(RegExp.escape(text), \"g\"), symbol);\r\n    });\r\n    // console.log('TCL: convertTextToSymbol -> textEquation', textEquation);\r\n    return textEquation;\r\n}\r\n\r\nfunction convertSymbolToText(symbolEquation) {\r\n    Object.entries(equationTextToSymbol).forEach(([text, symbol]) => {\r\n        symbolEquation = symbolEquation.replace(new RegExp(RegExp.escape(symbol), \"g\"), text);\r\n    });\r\n    return symbolEquation;\r\n}\r\n\r\nfunction getMainEquation(inGuppyPlainTextFormat) {\r\n    try {\r\n        let equation = getEquation(mainInput, \"main\", inGuppyPlainTextFormat);\r\n        console.log('TCL: getEquation -> equation', equation);\r\n        detachWarning(eqInput);\r\n        return equation;\r\n    } catch (e) {\r\n        warningTimerId = setTimeout(() => {\r\n            AttachWarning(eqInput)\r\n        }, 500);\r\n        // console.log('TCL: timerId -> timerId', warningTimerId);\r\n    }\r\n    return new Error(\"error loading equation\");\r\n}\r\n\r\nfunction getEquation(input, varName, inGuppyPlainTextFormat) {\r\n    let inputContent = \"\";\r\n    try {\r\n        inputContent = input.engine.get_content(\"text\");\r\n        console.log('TCL: getEquation -> inputContent', inputContent);\r\n    } catch (e) {\r\n        AttachWarning(document.querySelector(`.eqInput[data-var=\"${varName}\"]`));\r\n        // throw new Error(\"Some equations are invalid!\");\r\n    }\r\n    let equation = convertTextToSymbol(inputContent);\r\n    console.log('TCL: getEquation -> equation', equation);\r\n    equation = handleSubscripts(equation, inGuppyPlainTextFormat);\r\n    console.log('TCL: getEquation -> equation', equation);\r\n    return equation;\r\n}\r\n\r\nfunction convertToExponential(equation) {\r\n    const value = nerdamer(equation).evaluate().text();\r\n    console.log('TCL: convertToExponential -> value', value);\r\n    const minPowerForExponential = 5;\r\n    if (isFinite(value)) {\r\n        let exponential = Number(value).toExponential();\r\n        exponential = exponential.toUpperCase(); // convert lowercase e to uppercase E\r\n        const exponent = exponential.substring(exponential.indexOf(\"E\") + 1);\r\n        if (Math.abs(Number(exponent)) > minPowerForExponential) {\r\n            return exponential;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n    return equation;\r\n}\r\n\r\nfunction getExponent(value) {\r\n    let exponential = Number(value).toExponential();\r\n    exponential = exponential.toUpperCase(); // convert lowercase e to uppercase E\r\n    const exponent = exponential.substring(exponential.indexOf(\"E\") + 1);\r\n    return exponent;\r\n}\r\n\r\nfunction handleVarNameSubscripts(varName) {\r\n    if (varName.indexOf(\"_\") >= 0) {\r\n        return handleSubscripts(`(${varName})`, true);\r\n    } else {\r\n        return varName;\r\n    }\r\n}\r\n\r\nfunction AddParenthesesAroundVarName(equation) {\r\n    let vars = nerdamer(equation).variables();\r\n    const searchVarNames = {};\r\n    // filter out vars without subscripts\r\n    vars = vars.filter(varName => varName.indexOf(\"_\") >= 0);\r\n    vars.forEach(varName => {\r\n        const varMap = {};\r\n        const searchVarName = \"_\" + varName.replace(\"_\", \"c\") + \"_\";\r\n        varMap[varName] = searchVarName;\r\n        searchVarNames[varName] = searchVarName;\r\n        equation = nerdamer(equation, varMap).text();\r\n        console.log('TCL: AddParenthesesAroundVarName -> equation', equation);\r\n    });\r\n    vars.forEach(varName => {\r\n        const varNameWithParen = \"(\" + varName + \")\";\r\n        equation = equation.replace(new RegExp(searchVarNames[varName], \"g\"), varNameWithParen);\r\n    });\r\n    return equation;\r\n}\r\n\r\nfunction handleSubscripts(equation, inGuppyPlainTextFormat = true, AddParentheses = false) {\r\n    if (equation.indexOf(\"_\") >= 0) { // contains subscripts\r\n        if (AddParentheses) {\r\n            equation = AddParenthesesAroundVarName(equation);\r\n        }\r\n        let startIndex = 0;\r\n        let underscoreIndex = equation.indexOf(\"_\", startIndex);\r\n        while (underscoreIndex >= 0) {\r\n            // console.log(\"underscoreIndex: \", underscoreIndex);\r\n            const openParenIndex = equation.lastIndexOf(\"(\", underscoreIndex);\r\n            // console.log(\"openParenIndex: \", openParenIndex);\r\n            let closeParenIndex = findClosingBracketMatchIndex(equation, openParenIndex);\r\n            // console.log(\"closeParenIndex: \", closeParenIndex);\r\n            let subscriptStartIndex, subscriptEndIndex;\r\n            if (inGuppyPlainTextFormat) {\r\n                if (underscoreIndex + 1 < equation.length && equation.charAt(underscoreIndex + 1) !== \"(\") { // no open paren after underscore\r\n                    // surround the single subscript with a pair of parentheses\r\n                    equation = insertSubstring(equation, underscoreIndex + 1, \"(\");\r\n                    equation = insertSubstring(equation, closeParenIndex + 1, \")\");\r\n                    closeParenIndex += 2; // two parentheses added\r\n                    // console.log(\"equation: \" + equation);\r\n                }\r\n                subscriptStartIndex = underscoreIndex + 2;\r\n                subscriptEndIndex = closeParenIndex - 1;\r\n            } else {\r\n                if (underscoreIndex + 1 < equation.length && equation.charAt(underscoreIndex + 1) === \"(\") { // open paren after underscore\r\n                    equation = deleteSubstring(equation, underscoreIndex + 1, 1);\r\n                    equation = deleteSubstring(equation, closeParenIndex - 1, 1);\r\n                    closeParenIndex -= 2; // two parentheses deleted\r\n                }\r\n                //   console.log(\"equation: \" + equation);\r\n                subscriptStartIndex = underscoreIndex + 1;\r\n                subscriptEndIndex = closeParenIndex + 1;\r\n                //   console.log(\"subscriptStartIndex: \" + subscriptStartIndex);\r\n                //   console.log(\"subscriptEndIndex: \" + subscriptEndIndex);\r\n            }\r\n            let subscript = \"\";\r\n            for (let i = subscriptStartIndex; i < subscriptEndIndex; i++) {\r\n\r\n                const char = equation.substring(i, i + 1);\r\n                // console.log(\"char: \", char);\r\n                if (char !== \"(\" && char !== \")\" && char != \"*\" && char != \" \") {\r\n                    subscript += char;\r\n                    if (inGuppyPlainTextFormat && i < subscriptEndIndex - 1) {\r\n                        subscript += \"*\";\r\n                    }\r\n                }\r\n            }\r\n            // console.log(\"subscript: \" + subscript);\r\n            equation = insertSubstring(equation, subscriptStartIndex, subscript, subscriptEndIndex - underscoreIndex - 2);\r\n            startIndex = underscoreIndex + 1;\r\n            underscoreIndex = equation.indexOf(\"_\", startIndex);\r\n        }\r\n        return equation;\r\n    } else {\r\n        return equation;\r\n    }\r\n}\r\n\r\nfunction AttachWarning(element) {\r\n    // console.log('TCL: AttachWarning -> AttachWarning');\r\n    const warningSign = element.parentNode.querySelector(`.warning`);\r\n    if (!warningSign) {\r\n        element.insertAdjacentHTML(\"afterend\", `<i class=\"fa fa-exclamation-triangle warning\" aria-hidden=\"true\"></i>`);\r\n    }\r\n}\r\n\r\nfunction detachWarning(element) {\r\n    // console.log('TCL: detachWarning -> detachWarning');\r\n    // console.log('TCL: detachWarning -> timerId', warningTimerId);\r\n    const warningSign = element.parentNode.querySelector(`.warning`);\r\n    // clearTimeout(timerId);\r\n    if (warningSign) {\r\n        // console.log('TCL: detachWarning -> removing warningSign', warningSign);\r\n        warningSign.remove();\r\n    } else {\r\n        clearTimeout(warningTimerId);\r\n    }\r\n}\r\n\r\nfunction setMainEquation(equation) {\r\n    if (equation) {\r\n        console.log('TCL: setEquation -> convertSymbolToText(equation)', convertSymbolToText(equation));\r\n        setInputEquation(mainInput, equation);\r\n        mainInput.engine.end();\r\n        mainInput.activate();\r\n        mainInput.render(true);\r\n    }\r\n}\r\n\r\nfunction setInputEquation(input, equation, AddParentheses = false) {\r\n    console.log('TCL: setInputEquation -> equation', equation);\r\n    const processedEquation = convertSymbolToText(handleSubscripts(equation, true, AddParentheses));\r\n    console.log('TCL: setInputEquation -> processedEquation', processedEquation);\r\n    if (processedEquation) {\r\n        input.import_text(processedEquation);\r\n    } else {\r\n        input.engine.sel_all();\r\n        input.engine.sel_clear();\r\n    }\r\n    input.engine.end();\r\n    input.render(true);\r\n}\r\n\r\nfunction configureInput(input) {\r\n    input.configure(\"blacklist\", guppyBlacklist);\r\n    input.configure(\"cliptype\", \"text\");\r\n    input.configure(\"button\", [\"osk\", \"settings\", \"symbols\", \"controls\"]);\r\n    input.event(\"focus\", (focusedObj) => {\r\n        if (focusedObj.focused) {\r\n            // console.log('TCL: focused', focusedObj);\r\n            removeExtraGuppyOSKTabs();\r\n            document.getElementById(\"editField\").scrollIntoView({\r\n                behavior: \"smooth\",\r\n                block: \"start\",\r\n                inline: \"nearest\"\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction configureGuppyHelp() {\r\n    const additionalBlacklist = [\r\n        \"int\", \"defi\", \"deriv\",\r\n        \"mat\", \"vec\", \"sum\", \"prod\",\r\n        \"leq\", \"geq\", \"less\", \"greater\", \"neq\",\r\n    ];\r\n    // configure guppy help to restrict symbols\r\n    document.querySelector('#guppy_syms_table')\r\n        .querySelectorAll(\"tr\").forEach(row => {\r\n            const symbolName = row.querySelector(\"td\").innerText;\r\n            if (guppyBlacklist.indexOf(symbolName) >= 0 || additionalBlacklist.indexOf(symbolName) >= 0) {\r\n                row.remove();\r\n            }\r\n        });\r\n}\r\n\r\nfunction createEquationEditor() {\r\n    const editor = document.createElement(\"div\");\r\n    editor.id = \"editField\";\r\n    editor.classList.add(\"editor\");\r\n    editor.setAttribute(\"data-type\", \"equation\");\r\n    editor.insertAdjacentHTML(\"afterbegin\",\r\n        `<div>\r\n    <label for=\"eqInput\">Equation: </label>\r\n    <div id=\"eqInput\" type=\"text\" size=\"${eqLength}\" spellcheck=\"false\"></div>\r\n    </div>\r\n    `);\r\n    return editor;\r\n}\r\n\r\nfunction removeExtraGuppyOSKTabs() {\r\n    // console.log('TCL: removeExtraGuppyOSKTabs -> removeExtraGuppyOSKTabs');\r\n    // remove extra tabs\r\n    document.querySelector('#guppy_osk_tab_calculus').remove();\r\n    document.querySelector('#guppy_osk_tab_array').remove();\r\n    document.querySelector('#guppy_osk_tab_editor').remove();\r\n    document.querySelector('#guppy_osk_tab_emoji').remove();\r\n    document.querySelector('#guppy_osk_tab_operations').remove();\r\n\r\n    // remove extra control buttons\r\n    document.querySelector('body > div.guppy_osk > div.tabbar > div.scroller-left').remove();\r\n    document.querySelector('body > div.guppy_osk > div.tabbar > div.scroller-right').remove();\r\n\r\n    setTimeout(function () { // use settimeout to avoid obstructing the program flow\r\n\r\n        // remove extra functions in tabs\r\n        document.querySelector('#functions > span:nth-child(1)').remove();\r\n        document.querySelector('#functions > span:nth-child(2)').remove();\r\n        document.querySelector('#functions > span:nth-child(4)').remove();\r\n        for (let i = 0; i < 4; i++) {\r\n            document.querySelector('#functions > span:nth-child(8)').remove();\r\n        }\r\n\r\n        // remove extra greek letters\r\n        console.log(\"removing extra greek letters...\");\r\n        document.querySelectorAll('#greek span > span.katex-mathml > math > semantics > mrow > mi').forEach(cell => {\r\n            // console.log('TCL: removeExtraGuppyOSKTabs -> cell', cell);\r\n            const letter = cell.innerHTML;\r\n            if (Object.values(conversionTable).indexOf(letter) < 0) {\r\n                cell.closest(\"span.guppy_osk_key\").remove();\r\n            }\r\n        })\r\n\r\n        // remove extra trig functions\r\n        document.querySelectorAll('#trigonometry span > span > span.katex-mathml > math > semantics > mrow > mi').forEach(cell => {\r\n            const funcName = cell.innerHTML;\r\n            const allowedTrigFunctions = [\"cos\", \"sin\", \"tan\", \"arccos\", \"arcsin\", \"arctan\", \"log\", \"ln\"];\r\n            if (allowedTrigFunctions.indexOf(funcName) < 0) {\r\n                cell.closest(\"span.guppy_osk_key\").remove();\r\n            }\r\n        })\r\n    }, 100);\r\n}\r\n\r\nfunction openEquationEditField(eqName, eqInfo, position) {\r\n    const editor = createEquationEditor();\r\n    editor.setAttribute(\"data-item\", eqName);\r\n    if (position === undefined) {\r\n        system.appendChild(editor);\r\n    } else {\r\n        insertAfter(position, editor);\r\n    }\r\n\r\n    const eqInput = document.getElementById(\"eqInput\");\r\n    eqInput.classList.add(\"eqInput\");\r\n    eqInput.setAttribute(\"data-var\", \"main\");\r\n    // convert div to guppy editor\r\n    mainInput = new Guppy(\"eqInput\");\r\n    configureInput(mainInput)\r\n    configureGuppyHelp();\r\n    mainInput.event(\"change\", updateVarTable);\r\n    mainInput.activate();\r\n    // const previousEquation = eqInfo.equation;\r\n    // if (previousEquation) {\r\n    //     console.log('TCL: previousEquation', previousEquation);\r\n    //     setEquation(previousEquation);\r\n    // }\r\n\r\n    // load equation info from storage\r\n    if (eqInfo !== undefined) {\r\n        if (eqInfo.equation) {\r\n            setMainEquation(eqInfo.equation);\r\n        }\r\n        console.log(\"Creating Var Table ...\");\r\n        createVarTable(eqInfo);\r\n    }\r\n\r\n    function updateVarTable() {\r\n        const eq = getMainEquation();\r\n        console.log('TCL: updateVarTable -> eq', eq);\r\n        let vars = getEquationVars(eq);\r\n        console.log('TCL: updateVarTable -> vars', vars);\r\n\r\n        let varTable = document.getElementById(\"varTable\");\r\n        // console.log('TCL: updateVarTable -> varTable', varTable);\r\n        if (varTable) {\r\n            const rows = varTable.querySelectorAll(`tbody tr`);\r\n            const rowVars = [];\r\n            rows.forEach(\r\n                (row) => {\r\n                    rowVars.push(row.getAttribute(\"data-var\"));\r\n                }\r\n            );\r\n\r\n            // detect empty main equation\r\n            const emptyXML = new RegExp(\"<m[^>]*><e[^>]*></e></m>\");\r\n            const mainContent = mainInput.engine.get_content(\"xml\");\r\n            console.log('TCL: updateVarTable -> mainContent', mainContent);\r\n            console.log('TCL: updateVarTable -> emptyXML.test(mainContent)', emptyXML.test(mainContent));\r\n            if (emptyXML.test(mainContent)) { // empty main equation\r\n                varTable.remove();\r\n            }\r\n\r\n            vars.forEach(\r\n                (variable) => {\r\n                    const tbody = varTable.getElementsByTagName(\"tbody\")[0];\r\n                    if (rowVars.indexOf(variable) < 0) {\r\n                        const newRow = createNewRowHTML(variable);\r\n                        tbody.insertAdjacentHTML(\"beforeend\", newRow);\r\n                        varInputs[variable] = new Guppy(`eqInput-${variable}`);\r\n                        configureInput(varInputs[variable]);\r\n                    }\r\n                    console.log(\"Solving var equations...\");\r\n                    setInputEquation(varInputs[variable], solveEquation(eq, variable), true);\r\n                }\r\n            )\r\n            if (vars.length > 0) {\r\n                rows.forEach(\r\n                    (row) => {\r\n                        const rowVar = row.getAttribute(\"data-var\");\r\n                        if (vars.indexOf(rowVar) < 0) {\r\n                            row.remove();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n            if (!eq instanceof Error && eq === \"\") {\r\n                if (varTable) {\r\n                    varTable.remove();\r\n                }\r\n            }\r\n        } else {\r\n            createVarTable();\r\n        }\r\n        renderEquationVars();\r\n    }\r\n\r\n    function getEquationVars(equation) {\r\n        let variables = [];\r\n        try {\r\n            variables = nerdamer(handleSubscripts(equation.replace(/\\=/g, \" \"), false)).variables();\r\n            console.log('TCL: getEquationVars -> variables', variables);\r\n            console.log(\"Handling subscripts in equation vars...\");\r\n            deleteStrInArray(\"ln\", variables);\r\n        } catch (e) {}\r\n        return variables;\r\n    }\r\n\r\n    function createVarTable(varInfo) {\r\n        console.log('TCL: createVarTable -> varInfo', varInfo);\r\n        const eq = getMainEquation();\r\n        detachWarning(eqInput);\r\n        const vars = getEquationVars(eq);\r\n        // console.log('TCL: createEquationEditor -> vars', vars);\r\n        let varTable = document.getElementById(\"varTable\");\r\n        if (vars.length > 0) {\r\n            let tableStr = `\r\n            <thead>\r\n            <tr>\r\n                <th>Vars</th>\r\n                <th>Equations</th>\r\n                <th>Description</th>\r\n            </tr>\r\n            </thead>`;\r\n            vars.forEach((variable) => {\r\n                tableStr += createNewRowHTML(variable);\r\n            });\r\n            if (!varTable) {\r\n                varTable = document.createElement(\"table\");\r\n                varTable.id = \"varTable\";\r\n            }\r\n            varTable.innerHTML = tableStr;\r\n            editor.appendChild(varTable);\r\n\r\n            vars.forEach((variable) => {\r\n                varInputs[variable] = new Guppy(`eqInput-${variable}`);\r\n                configureInput(varInputs[variable]);\r\n            })\r\n\r\n            if (varInfo !== undefined) {\r\n                const varEquations = varInfo.varEquations;\r\n                console.log('TCL: createVarTable -> varEquations', varEquations);\r\n                const varDescriptions = varInfo.varDescriptions;\r\n                console.log('TCL: createVarTable -> varDescriptions', varDescriptions);\r\n                // load var equations if specified\r\n                if (varInfo) {\r\n                    loadVarEquations(varInfo);\r\n                    renderEquationVars();\r\n                }\r\n                // load var descriptions if specified\r\n                if (varDescriptions) {\r\n                    loadVarDescriptions(varDescriptions);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction solveEquation(equation, variable) {\r\n    const solution = nerdamer.solve(convertTextToSymbol(handleSubscripts(equation, false)), variable);\r\n    console.log('TCL: solveEquation -> convertTextToSymbol(handleSubscripts(equation, false))', convertTextToSymbol(handleSubscripts(equation, false)));\r\n    let finalResult = \"\"; // default to no real solutions\r\n    if (solution.symbol && solution.symbol.elements) {\r\n        // return solution.symbol.elements[0].text();\r\n        solution.symbol.elements.some(element => {\r\n            console.log('TCL: solveEquation -> element', element.text());\r\n            if ((element.symbol ? (element.symbol.isImaginary() === false) : (true))) { // not imaginary number\r\n                if ((solution.symbol.elements.length >= 2 &&\r\n                        // number must be greater than 0; expr must not start with negative sign\r\n                        (element.value === \"#\" ?\r\n                            (element.gte(0)) :\r\n                            (nerdamer(element.text()).evaluate().text().startsWith(\"-\") === false))) ||\r\n                    // only solution can be negative\r\n                    solution.symbol.elements.length <= 1) {\r\n                    finalResult = Algebrite.simplify(element.text()).toString();\r\n                    return true; // exit the loop\r\n                }\r\n            }\r\n            return false; // keep looping\r\n        });\r\n    }\r\n    console.log('TCL: solveEquation -> finalResult', finalResult);\r\n    return finalResult;\r\n}\r\n\r\nfunction renderEquationVars() {\r\n    console.log('TCL: renderEquationVars -> renderEquationVars');\r\n    const result = Guppy.Doc.render_all(\"text\", \"$$\");\r\n    console.log('TCL: renderEquationVars -> result', result);\r\n    const varTable = document.getElementById(\"varTable\");\r\n    if (varTable) {\r\n        varTable.querySelectorAll(\"tbody tr\").forEach(\r\n            (row) => {\r\n                console.log('TCL: renderEquationVars -> row', row);\r\n                const guppyDoc = row.querySelector(\".guppy-render\");\r\n                if (guppyDoc && guppyDoc.innerHTML === \"ERROR: undefined\") {\r\n                    row.querySelector(\"th\").innerHTML = `\\$\\$${row.getAttribute(\"data-var\")}\\$\\$`;\r\n                }\r\n            }\r\n        );\r\n        // Guppy.Doc.render_all(\"text\", \"$$\");\r\n    }\r\n}\r\n\r\nfunction createNewRowHTML(variable) {\r\n    let newRow = `<tr data-var=\"${variable}\"><th>\\$\\$${handleVarNameSubscripts(variable)}\\$\\$</th><td>`;\r\n    // add variable equation column\r\n    newRow += `<div id=\"eqInput-${variable}\" class=\"eqInput varEqInput\" data-var=\"${variable}\"></div></td>`;\r\n    // add variable description column\r\n    const varDescriptionLength = lineLength - variable.length - 1;\r\n    newRow += `<td><input type=\"text\" class=\"descriptionInput\" \r\nsize=${varDescriptionLength} maxlength=${varDescriptionLength} data-var=\"${variable}\" spellcheck=\"false\"`;\r\n    newRow += `</tr>`;\r\n    return newRow;\r\n}\r\n\r\nfunction loadVarDescriptions(varDescriptions) {\r\n    Array.from(document.getElementsByClassName(\"descriptionInput\")).forEach((input) => {\r\n        const variable = input.getAttribute(\"data-var\");\r\n        if (variable) {\r\n            const varEquation = varDescriptions[variable];\r\n            if (varEquation) { // not undefined or empty string\r\n                input.value = varEquation;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction loadVarEquations(varInfo) {\r\n    const varEquations = varInfo.varEquations;\r\n    const constants = varInfo.constants;\r\n    console.log('TCL: loadVarEquations -> varEquations', varEquations);\r\n    Object.keys(varEquations).forEach((variable) => {\r\n        console.log('TCL: loadVarEquations -> variable', variable);\r\n        const varInput = varInputs[variable];\r\n        const varEquation = varEquations[variable];\r\n        if (constants && Object.keys(constants).indexOf(variable) >= 0) {\r\n            const constant = constants[variable];\r\n            varInput.import_xml(constant);\r\n            varInput.engine.end();\r\n            varInput.render(true);\r\n        } else {\r\n            setInputEquation(varInput, varEquation, false);\r\n        }\r\n    })\r\n}"]}