{"version":3,"sources":["script.js"],"names":["lineLength","rowLength","menuTitleLength","menuItemLength","calculatorType","minMenuItemLength","newFolderBtn","document","getElementById","newFileBtn","backBtn","clearBtn","system","navigationBar","homePosition","position","itemNameList","types","defaultToUppercase","lastFileContent","conversionTable","alpha","beta","gamma","Delta","delta","epsilon","pi","lambda","mu","Omega","phat","Phi","rho","Sigma","sigma","tau","sqrt(","integral","<=",">=","!=","updateAtPosition","currentPosition","iterateStorage","item","itemName","itemType","console","log","push","displayItem","updateItemSize","displayNavigationBar","removeAllChildren","positions","split","i","length","createPositionLabel","slice","join","positionLabel","createElement","classList","add","innerHTML","getEndOfActivePosition","addEventListener","setPosition","appendChild","insertAdjacentHTML","changeCalculatorType","removeItemPlaceholder","placeholder","remove","displayItemPlaceholder","id","swal","title","buttons","file","text","value","className","folder","then","createMenuItem","func","index","localStorage","key","getItemFromStorage","type","toggleBtnHighlight","e","target","contains","toggle","toLowerCase","indexOf","TypeError","itemNameInput","createItemNameInput","keyCode","shortItemName","trim","fullItemName","getFullItemName","createErrorMessage","storeNewItem","focus","setAttribute","maxLength","spellcheck","style","display","marginTop","marginBottom","message","querySelectorAll","forEach","el","popup","insertAfter","itemInfo","setItemInStorage","openFileEditField","openEquationEditField","clearAllItems","appendPosition","newPosition","displayTotalSize","totalSize","itemPosition","countItemSize","tools","totalSizeLabel","innerText","endPosition","substring","lastIndexOf","itemLabel","displayedName","itemLabelText","link","editField","storeItem","getAttribute","displayFile","displayEquation","storeFile","storeEquation","createFileEditor","editor","rows","cols","fileName","fileInfo","deleteItem","getItemLabelType","removeNotebook","removeItemFromStorage","removeElementInArray","removeLink","linkedItemName","renameItem","renameNotebook","oldItemName","parentNode","replaceElementInArray","renameItemInStorage","pinToHome","originalItemName","originalItemType","sameName","newName","cancel","icon","timer","linkItemToHome","askForNewLinkedName","content","element","attributes","newItemName","shortlinkedItemName","originalItem","undefined","getItemNamesAtPosition","alertTitle","button","Error","linkedItem","clone","restrictContextItems","pinToHomeBtn","querySelector","removeItem","JSON","parse","getItem","setItem","stringify","storedLinkedItem","convertWordsToSymbols","str","Object","entries","replace","RegExp","escape","convertSymbolsToWords","convertSingleQuotesToDoubleQuotes","convertDoubleQuotesToSingleQuotes","decodeFileContent","fileContent","convertSpacesToNewlines","encodeFileContent","convertNewlinesToSpaces","convertToUppercase","result","char","test","toUpperCase","toUppercase","start","end","insertSubstring","lastLineLength","controlDiv","submitBtn","Mousetrap","bind","combo","click","uppercaseCheckBox","checked","fileLabel","size","sizeString","sizeLabel","getElementsByClassName","countFileSize","countFolderSize","folderName","inputStr","previousNewlineIndex","newlineIndex","numOfSpaces","spaces","deleteSubstring","dangerMode","willDelete","removeItemList","startsWith"],"mappings":"AACA,IAGIA,WAAYC,UAAWC,gBAAiBC,eAHxCC,eAAiB,QAKrB,MAAMC,kBAAoB,EACpBC,aAAeC,SAASC,eAAe,gBACvCC,WAAaF,SAASC,eAAe,cACrCE,QAAUH,SAASC,eAAe,WAClCG,SAAWJ,SAASC,eAAe,YACnCI,OAASL,SAASC,eAAe,UACjCK,cAAgBN,SAASC,eAAe,iBACxCM,aAAe,OACrB,IAAIC,SAAWD,aACf,MAAME,gBAEAC,OAAS,OAAQ,SAAU,WAAY,YAC7C,IAAIC,oBAAqB,EACrBC,gBAAkB,GACtB,MAAMC,iBAEFC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,GAAI,IACJC,OAAQ,IACRC,GAAI,IACJC,MAAO,IACPC,KAAM,KACNC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,IAAK,IAGLC,QAAS,KACTC,SAAY,IACZC,KAAM,IACNC,KAAM,IACNC,KAAM,KAsBV,SAASC,iBAAiBC,GACtBC,eAAe,SAAUC,EAAMC,EAAUC,GACrCC,QAAQC,IAAI,gCAAiCJ,GACzCA,EAAK9B,WAAa4B,IAClB3B,aAAakC,KAAKJ,GAClBK,YAAYL,EAAUC,GACtBK,eAAeN,MA+E3B,SAASO,uBACLC,kBAAkBzC,eAClBmC,QAAQC,IAAI,wCAAyClC,UACrD,MAAMwC,EAAYxC,SAASyC,MAAM,KACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAClCE,oBAAoBJ,EAAUK,MAAM,EAAGH,EAAI,GAAGI,KAAK,MAI3D,SAASF,oBAAoB5C,GACzBiC,QAAQC,IAAI,uCAAwClC,GACpD,MAAM+C,EAAgBvD,SAASwD,cAAc,QAC7CD,EAAcE,UAAUC,IAAI,OAC5BH,EAAcE,UAAUC,IAAI,iBAC5BH,EAAcI,UAAYC,uBAAuBpD,GACjD+C,EAAcM,iBAAiB,QAAS,KACpCC,YAAYtD,GACZiC,QAAQC,IAAI,uCAAwClC,KAExDF,cAAcyD,YAAYR,GAC1BA,EAAcS,mBAAmB,WAAY,sCAGjD,SAASC,uBAEL,OAAQpE,gBACJ,IAAK,aACDJ,WAAa,GACbC,UAAY,EACZ,MACJ,IAAK,QACDD,WAAa,GACbC,UAAY,GAGpBC,gBAAkBF,WAClBG,eAAiBH,WAAa,EAGlC,SAASyE,wBACL,IAAIC,EAAcnE,SAASC,eAAe,sBACtCkE,GACAA,EAAYC,SAIpB,SAASC,yBAEL,GADAH,wBAC4B,IAAxBzD,aAAa0C,OAAc,CAC3B,MAAMgB,EAAcnE,SAASwD,cAAc,KAC3CW,EAAYG,GAAK,qBACjBH,EAAYV,UAAUC,IAAI,OAC1BS,EAAYR,UAAY,8BACxBQ,EAAYN,iBAAiB,QAAS,KAClCU,MACQC,MAAO,2BACPC,SACIC,MACIC,KAAM,OACNC,MAAO,OACPC,UAAW,oBAEfC,QACIH,KAAM,SACNC,MAAO,SACPC,UAAW,uBAItBE,KAAMH,IACHnC,QAAQC,IAAI,0CAA2CkC,GACnDA,GACAI,eAAeJ,OAI/BvE,OAAO0D,YAAYI,IAM3B,SAAS9B,eAAe4C,GACpB,IAAK,IAAIC,EAAQ,EAAGA,EAAQC,aAAahC,OAAQ+B,IAAS,CACtD,MAAM3C,EAAW4C,aAAaC,IAAIF,GAC5B5C,EAAO+C,mBAAmB9C,GAChC0C,EAAK3C,EAAMC,EAAUD,EAAKgD,KAAMhD,EAAK9B,SAAU0E,IAIvD,SAASK,mBAAmBC,GACpBA,EAAEC,OAAOhC,UAAUiC,SAAS,QAC5BF,EAAEC,OAAOhC,UAAUkC,OAAO,aAQlC,SAASX,eAAeM,GAGpB,GAFApB,wBACAoB,EAAOA,EAAKM,cACRlF,MAAMmF,QAAQP,GAAQ,EACtB,MAAM,IAAIQ,mEAAmER,KAEjF,MAAMS,EAAgBC,oBAAoBV,GAC1CS,EAAclC,iBAAiB,WAAa2B,IACxC,GAAiB,IAAbA,EAAES,QAAe,CACjB,MAAMC,EAAgBH,EAAcnB,MAAMuB,OACpCC,EAAeC,gBAAgBH,GACjCA,EAAc/C,QAAUrD,kBACX,WAATwF,GAAqBY,EAAcL,QAAQ,OAAS,EACpDS,mBAAmBP,EACf,mCACGtF,aAAaoF,QAAQO,IAAiB,EAC7CE,mBAAmBP,gBACDT,WAAcA,0BAEhC7E,aAAakC,KAAKyD,GAClBxD,YAAYwD,EAAcd,EAAMS,GAChCQ,aAAaR,EAAeT,EAAM9E,UAElCuF,EAAc3B,UAGlBkC,mBAAmBP,KAAkBT,4BAIjDjF,OAAO0D,YAAYgC,GACnBA,EAAcS,QAGlB,SAASH,gBAAgBH,GACrB,SAAU1F,YAAY0F,IAI1B,SAASF,oBAAoBV,GACzB,MAAMS,EAAgB/F,SAASwD,cAAc,SAU7C,OATAuC,EAAcU,aAAa,OAAQ,QACnCV,EAAc5B,qBAAuBmB,cAErCS,EAAcW,UAAY9G,eAC1BmG,EAAcY,YAAa,EAC3BZ,EAActC,UAAUC,IAAI,iBAC5BqC,EAAca,MAAMC,QAAU,QAC9Bd,EAAca,MAAME,UAAY,OAChCf,EAAca,MAAMG,aAAe,OAC5BhB,EAGX,SAASO,mBAAmBb,EAAQuB,GAChCvE,QAAQC,IAAI,oCAAqC+C,GACjDhD,QAAQC,IAAI,kDAAmD+C,GAE/DzF,SAASiH,iBAAiB,UAAUC,QAChCC,IACIA,EAAG/C,WAGX,MAAMgD,EAAQpH,SAASwD,cAAc,QACrC4D,EAAMzD,UAAYqD,EAClBI,EAAM3D,UAAUC,IAAI,SACpB+B,EAAO5B,iBAAiB,QAAS,KAC7BuD,EAAMhD,WAEViD,YAAY5B,EAAQ2B,GAGxB,SAASb,aAAaR,EAAeT,EAAM9E,GACvCiC,QAAQC,IAAI,qCAEZ,MAAM4E,GACF9G,SAAYA,EACZ8E,KAAQA,GAEN/C,KAAc/B,KAAYuF,EAAcnB,QAG9C,OAFAnC,QAAQC,IAAI,gCAAiCH,GAC7CgF,iBAAiBhF,EAAU+E,GACnBhC,GACJ,IAAK,OACDkC,kBAAkBjF,EAAU+E,GAC5B,MACJ,IAAK,WACDG,sBAAsBlF,EAAU+E,GAGxC,OAAO/E,EAKX,SAASmF,gBACL3E,kBAAkB1C,QAClBI,aAAa0C,OAAS,EAG1B,SAASwE,eAAeC,GACpB9D,eAAetD,YAAYoH,KAI/B,SAAS9D,YAAY8D,GACjBpH,SAAWoH,EACXF,gBACAvF,iBAAiByF,GACjB9E,uBACAuB,yBACAwD,mBAGJ,SAASA,mBACL,IAAIC,EAAY,EAChBzF,eAAe,SAAUC,EAAMC,EAAUC,EAAUuF,GAC3CA,IAAiBvH,WACjBsH,GAAaE,cAAczF,MAGnC,MAAM0F,EAAQjI,SAASC,eAAe,SACtC,IAAIiI,EAAiBlI,SAASC,eAAe,kBACxCiI,KACDA,EAAiBlI,SAASwD,cAAc,SACzBc,GAAK,iBACpB2D,EAAMlE,YAAYmE,IAEtBA,EAAeC,aAAeL,SAOlC,SAASlE,uBAAuBrB,GAC5B,IAAI6F,EAAc7F,EAAS8F,UAAU7H,SAAS2C,OAAS,GACvD,MAAoB,KAAhBiF,EACO7F,EAAS8F,UAAU9F,EAAS+F,YAAY,KAAO,GAE/CF,EAKf,SAASxF,YAAYL,EAAUC,EAAUuF,GAErC,MAAMQ,EAAYvI,SAASwD,cAAc,KACnC8D,EAAWjC,mBAAmB9C,GAC9BiG,EAAgB5E,uBAAuBrB,GAC7C,IAAIkG,EAAgB,GACH,SAAbjG,EACAiG,EAAgB,KACI,WAAbjG,EACPiG,EAAgB,KACI,aAAbjG,IACPiG,EAAgB,qCAIpBA,GAAiBD,EAGblB,GAAYA,EAASoB,OACrBD,GAAiB,+BAGrBF,EAAU5E,UAAY8E,EAEtBF,EAAU9E,UAAUC,IAAIlB,GACxB+F,EAAU9E,UAAUC,IAAI,OACxB6E,EAAU9E,UAAUC,IAAI,QACxB6E,EAAU9B,aAAa,YAAalE,GACpCgG,EAAU1E,iBAAiB,QAAS,KAChC,MAAMyD,EAAWjC,mBAAmB9C,GAC9BoG,EAAY3I,SAASC,eAAe,aAC1C,GAAI0I,EAAW,CAEXC,UADyBD,EAAUE,aAAa,cAGnC,SAAbrG,EACAsG,YAAYP,EAAWhG,EAAU+E,GACb,WAAb9E,GAEPC,QAAQC,IAAI,+BAAgClC,UACxC6E,mBAAmB9C,GACnBuB,YAAYvB,GAEZoF,eAAepF,GAEnBE,QAAQC,IAAI,+BAAgClC,WACxB,aAAbgC,GACPuG,gBAAgBR,EAAWhG,EAAU+E,KAIzCS,GACAtF,QAAQC,IAAI,+BAAgCqF,GAC5CV,YAAYU,EAAcQ,IAE1BlI,OAAO0D,YAAYwE,GAI3B,SAASK,UAAUrG,GACfE,QAAQC,IAAI,6BAA8BH,GAC1C,MAAMD,EAAO+C,mBAAmB9C,GAEhC,GADAE,QAAQC,IAAI,yBAA0BJ,GAClCA,EAAM,CACN,MAAME,EAAWF,EAAKgD,KAEtB,OADA7C,QAAQC,IAAI,6BAA8BF,GAClCA,GACJ,IAAK,OACDwG,UAAUzG,EAAUD,GACpB,MACJ,IAAK,WACD2G,cAAc1G,EAAUD,KAMxC,SAAS4G,iBAAiB5E,GACtB,MAAM6E,EAASnJ,SAASwD,cAAc,YAatC,OAXI2F,EAAO7E,GADPA,GAGY,SAEhB6E,EAAO1F,UAAUC,IAAI,UACrByF,EAAO1C,aAAa,YAAa,QACjC0C,EAAOC,KAAO1J,UAGdyJ,EAAOE,KAAO5J,WAAa,EAC3B0J,EAAOxC,YAAa,EACbwC,EAGX,SAASL,YAAYtI,EAAU8I,EAAUC,GAErC,MAAMZ,EAAY3I,SAASC,eAAe,aAC1C,GAAI0I,EAAW,CACXA,EAAUvE,SACcuE,EAAUE,aAAa,eACvBS,GACpBR,YAAYtI,EAAU8I,EAAUC,QAGpC/B,kBAAkB8B,EAAUC,EAAU/I,GAI9C,SAASgJ,WAAWjB,GAEhB,GAAiB,aADAkB,iBAAiBlB,GAE9BmB,eAAenB,OACZ,CACH,MAAMhG,EAAWgG,EAAUM,aAAa,aAEpCtG,IACAoH,sBAAsBpH,GACtBqH,qBAAqBnJ,aAAc8B,GACnCsH,WAAWtH,IAGfsF,mBAEAU,EAAUnE,SAEV,MAAMuE,EAAY3I,SAASC,eAAe,aACtC0I,GAAaA,EAAUE,aAAa,eAAiBtG,GACrDoG,EAAUvE,UAKtB,SAASyF,WAAWC,GAChBzH,eAAe,SAAUC,EAAMC,GACVD,EAAKoG,OACLoB,WACNxH,EAAKoG,KACZnB,iBAAiBhF,EAAUD,MAKvC,SAASyH,WAAWxB,GAEhB,GAAiB,aADAkB,iBAAiBlB,GAE9ByB,eAAezB,OACZ,CACH,MAAM0B,EAAc1B,EAAUM,aAAa,aAC3C,GAAIoB,EAAa,CACb,MACM3E,EADOD,mBAAmB4E,GACd3E,KACZS,EAAgBC,oBAAoBV,GAC1CS,EAAcnB,MAAQhB,uBAAuBqG,GAC7C5C,YAAYkB,EAAWxC,GACvBA,EAAcS,QACd/D,QAAQC,IAAI,+BAAgC6F,GAC5C9F,QAAQC,IAAI,0CAA2C6F,EAAU2B,YACjE3B,EAAUnE,SACV2B,EAAclC,iBAAiB,WAAa2B,IACxC,MAAMU,EAAgBH,EAAcnB,MAAMuB,OACpCC,EAAeC,gBAAgBH,GACjCA,EAAc/C,QAAUrD,kBACX,WAATwF,GAAqBY,EAAcL,QAAQ,OAAS,EACpDS,mBAAmBP,EACf,mCACgB,IAAbP,EAAES,UACLxF,aAAaoF,QAAQO,IAAiB,GAAKA,IAAiB6D,EAC5D3D,mBAAmBP,gBACDT,WAAcA,0BAEhC6E,sBAAsB1J,aAAcwJ,EAAa7D,GACjDgE,oBAAoBH,EAAa7D,GACjCxD,YAAYwD,EAAcd,EAAMS,GAEhCA,EAAc3B,WAItBkC,mBAAmBP,KAAkBT,6BAOzD,SAAS+E,UAAU9B,GACf,MAAM+B,EAAmB/B,EAAUM,aAAa,aAC1C0B,EAAmBlF,mBAAmBiF,GAAkBhF,KAC9D7C,QAAQC,IAAI,6BAA8B4H,GAC1C/F,MACQC,MAAO,8BACPC,SACI+F,UACI7F,KAAM,YACNC,MAAO,YAEX6F,SACI9F,KAAM,WACNC,MAAO,WAEX8F,OAAQ,YAGf3F,KAAMH,IACH,OAAQA,GACJ,IAAK,WACDL,KAAK,mBACDoG,KAAM,UACNlG,SAAS,EACTmG,MAAO,MAEXC,eAAeP,GACf,MAEJ,IAAK,UACDQ,oBAAoBR,EAAkBC,MAM1D,SAASO,oBAAoBR,EAAkBC,GAC3ChG,MACQC,MAAO,mBACPuG,SACIC,QAAS,QACTC,YACI3F,KAAM,OACNoB,UAAWjH,WACXkH,YAAY,MAIvB5B,KAAMmG,IACHzI,QAAQC,IAAI,0CAA2CwI,GACvD3G,QAAQ2G,qBACJP,KAAM,UACNlG,SAAS,EACTmG,MAAO,MAEXC,eAAeP,EAAkBY,KAI7C,SAASL,eAAeP,EAAkBa,GACtC1I,QAAQC,IAAI,6CAA8CyI,GAC1D,MAAMC,EAAe/F,mBAAmBiF,GACxC7H,QAAQC,IAAI,sCAAuC0I,QACvBC,IAAxBF,IACAA,EAAsBvH,uBAAuB0G,IAEjD,MAAMR,UAAyBqB,IAG/B,GAFA1I,QAAQC,IAAI,gCAAiCoH,GACxBwB,uBAAuB/K,cAC3BsF,QAAQiE,IAAmB,GAA6B,KAAxBqB,EAA4B,CACzE,IAAII,EAAa,wBAcjB,MAbA9I,QAAQC,IAAI,6CAA8CyI,GAC9B,KAAxBA,IACAI,EAAa,8BAGjBhH,MACIC,MAAO+G,EACPZ,KAAM,UACNa,OAAQ,OACTzG,KAAK,KAEJ+F,oBAAoBR,EAAkBa,KAEpC,IAAIM,MAAM,qBAEpBhJ,QAAQC,IAAI,wBACZ,MAAMgJ,EAAaC,MAAMP,GACzB3I,QAAQC,IAAI,oCAAqCgJ,GAEjDA,EAAWlL,SAAWD,aACtBmL,EAAWhD,KAAO4B,EAClB7H,QAAQC,IAAI,oCAAqCgJ,GAEjDnE,iBAAiBuC,EAAgB4B,GAEjCN,EAAa1C,KAAOoB,EACpBvC,iBAAiB+C,EAAkBc,GAEnCtH,YAAYtD,UAGhB,SAAS8K,uBAAuB9K,GAC5B,MAAMC,KAMN,OALA4B,eAAe,SAAUC,EAAMC,GACvBD,EAAK9B,WAAaA,GAClBC,EAAakC,KAAKJ,KAGnB9B,EAGX,SAASmL,qBAAqBrD,GAC1B,MAAMsD,EAAe7L,SAAS8L,cAAc,iDAEtCtJ,GADW+F,EAAUM,aAAa,aACvBY,iBAAiBlB,IAClC9F,QAAQC,IAAI,wCAAyCF,GACjDqJ,IAEIA,EAAajF,MAAMC,QADnBrG,WAAaD,cAA6B,WAAbiC,GAAsC,aAAbA,EACzB,OAEA,SAKzC,SAASiH,iBAAiBlB,GAEtB,IAAI/F,EAQJ,GATAC,QAAQC,IAAI,qCAAsC6F,GAElD7H,MAAMwG,QAAQ5B,IACV7C,QAAQC,IAAI,gCAAiC4C,GACzCiD,EAAU9E,UAAUiC,SAASJ,KAC7B9C,EAAW8C,UAIF+F,IAAb7I,EACA,MAAM,IAAIiJ,MAAM,sBAEpB,OAAOjJ,EAGX,SAAS4H,oBAAoBH,EAAaiB,GACtC,MAAM5I,EAAO+C,mBAAmB4E,GAChCN,sBAAsBM,GACtB1C,iBAAiB2D,EAAa5I,GAGlC,SAASqH,sBAAsBpH,GAC3B4C,aAAa4G,WAAWxJ,GAG5B,SAAS8C,mBAAmB9C,GACxB,OAAOyJ,KAAKC,MAAM9G,aAAa+G,QAAQ3J,IAG3C,SAASgF,iBAAiBhF,EAAUD,GAIhC,GAFA6C,aAAagH,QAAQ5J,EAAUyJ,KAAKI,UAAU9J,IAE1CA,EAAKoG,KAAM,CACX,MAAMoB,EAAiBxH,EAAKoG,KAC5BjG,QAAQC,IAAI,0CAA2CoH,GACvD,MAAM4B,EAAaC,MAAMrJ,GACnB+J,EAAmBhH,mBAAmByE,GACxCuC,IACAX,EAAWlL,SAAW6L,EAAiB7L,SACvCkL,EAAWhD,KAAOnG,EAClB4C,aAAagH,QAAQrC,EAAgBkC,KAAKI,UAAUV,MAKhE,SAASY,sBAAsBC,GAC3B,IAAK,MAAOnH,EAAKR,KAAU4H,OAAOC,QAAQ5L,iBACtC0L,EAAMA,EAAIG,QAAQ,IAAIC,OAAOA,OAAOC,OAAO,KAAOxH,GAAM,KAAMR,GAElE,OAAO2H,EAGX,SAASM,sBAAsBN,GAC3B,IAAK,MAAOnH,EAAKR,KAAU4H,OAAOC,QAAQ5L,iBACtC0L,EAAMA,EAAIG,QAAQ,IAAIC,OAAOA,OAAOC,OAAOhI,GAAQ,KAAM,KAAOQ,GAEpE,OAAOmH,EAGX,SAASO,kCAAkCP,GACvC,OAAOA,EAAIG,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAG7C,SAASI,kCAAkCR,GACvC,OAAOA,EAAIG,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAG7C,SAASK,kBAAkBC,GACvB,IAAIlC,EAAUmC,wBAAwBD,GAGtC,OADAlC,EAAU+B,kCADV/B,EAAUuB,sBAAsBvB,IAKpC,SAASoC,kBAAkBF,GACvB,IAAIlC,EAAUqC,wBAAwBH,GAGtC,OADAlC,EAAUgC,kCAAkChC,GAIhD,SAASsC,mBAAmBd,GACxB,IAAIe,EAAS,GACb,IAAK,IAAIpK,EAAI,EAAGA,EAAIqJ,EAAIpJ,OAAQD,IAAK,CACjC,MAAMqK,EAAOhB,EAAIrJ,GACb,cAAcsK,KAAKD,GACnBD,GAAUC,EAAKE,cAEfH,GAAUC,EAGlB,OAAOD,EAGX,SAAS9F,kBAAkBjF,EAAU+E,EAAU9G,GAC3C,MAAM2I,EAASD,mBACfC,EAAOhF,YAAc,mBACrBuJ,YAAc/M,wBACW0K,IAArB/D,EAASyD,UACT5B,EAAOvE,MAAQoI,kBAAkB1F,EAASyD,SAC1C5B,EAAO1C,aAAa,YAAalE,GAC7B,SAASiL,KAAKrE,EAAOvE,SAErB8I,aAAc,IAGtBvE,EAAOtF,iBAAiB,QAAS,KAC7B,IAAIkH,EAAU5B,EAAOvE,MAYrB,GAVAmG,EAAUuB,sBAAsBvB,GAC5B2C,aAAe3C,EAAQlF,QAAQ,MAAQ,IACvCkF,EAAUsC,mBAAmBtC,IAIjClI,eAAeN,EAAUwI,GAEzBtI,QAAQC,IAAI,oCAAqCqI,GAE7CA,EAAQ5H,OAASvC,gBAAgBuC,OAAS1D,WAAY,CACtD,IAAIkO,EAAQ/M,gBAAgB0H,YAAY,MACxC,IAAK,IAAIsF,EAAM,EAAGA,EAAM7C,EAAQ5H,OAAQyK,IAChCA,EAAMD,IAAUlO,aAChBsL,EAAU8C,gBAAgB9C,EAAS6C,EAAM,EAAG,MAE5CD,IADAC,QAIL,GAAI7C,EAAQ5H,QAAUvC,gBAAgBuC,OAAQ,CACjD,MAAM2K,EAAiB/C,EAAQ5H,OAAS4H,EAAQzC,YAAY,MAAQ,EACpE7F,QAAQC,IAAI,2CAA4CoL,GACpDA,EAAiBrO,aACjBsL,EAAU8C,gBAAgB9C,EAASA,EAAQ5H,OAAS,EAAG,KAAM,IAEjEV,QAAQC,IAAI,2CAA4CqI,EAAQ5H,QAEpEgG,EAAOvE,MAAQmG,EACfnK,gBAAkBmK,IAGtB,MAAMgD,EAAa/N,SAASwD,cAAc,OAC1CuK,EAAWzJ,GAAK,mBAEhB,MAAM0J,EAAYhO,SAASwD,cAAc,QACzCwK,EAAU1J,GAAK,gBACf0J,EAAUvK,UAAUC,IAAI,OACxBsK,EAAUrK,UAAY,SACtBqK,EAAUnK,iBAAiB,QAAS,KAChCmF,UAAUzG,EAAU+E,GACpBqB,EAAUvE,WAEd6J,UAAU9E,GAAQ+E,KAAK,QAAS,SAAU1I,EAAG2I,GAEzC,OADAH,EAAUI,SACH,IAEX,MAAMzF,EAAY3I,SAASwD,cAAc,OACzCmF,EAAUrE,GAAK,YACfqE,EAAUlC,aAAa,YAAalE,QACnB8I,IAAb7K,EACAH,OAAO0D,YAAY4E,GAEnBtB,YAAY7G,EAAUmI,GAE1BA,EAAU5E,YAAYoF,GACtBR,EAAU5E,YAAYgK,GACtBA,EAAWhK,YAAYiK,GAGvBD,EAAW/J,mBAAmB,YAC1B,mPAKJ,MAAMqK,EAAoBrO,SAASC,eAAe,qBAClDoO,EAAkBC,QAAUZ,YAC5BW,EAAkBxK,iBAAiB,SAAU,KACrCwK,EAAkBC,UAAYZ,cAC9BA,YAAcW,EAAkBC,QAChCnF,EAAOvE,MAAQyI,mBAAmBlE,EAAOvE,UAGxB5E,SAASC,eAAe,oBAChC4D,iBAAiB,QAAS,KACvCU,MACIC,MAAO,6CACPG,KAAM,6aAGNF,QAAS,WAGjB0E,EAAO3C,QAGX,SAASwC,UAAUzG,EAAU+E,GACzB,IAAIyD,EAAU/K,SAASC,eAAe,UAAU2E,MAChDnC,QAAQC,IAAI,4BAA6BqI,GACzCA,EAAUoC,kBAAkBpC,GAC5BzD,EAASyD,QAAUA,EACnBxD,iBAAiBhF,EAAU+E,GAE3BzE,eAAeN,EAAUwI,GAG7B,SAASlI,eAAeN,EAAUwI,GAC9B,MAAMwD,EAAYvO,SAAS8L,8BAA8BvJ,OACnDiM,EAAOxG,cAAczF,EAAUwI,GACrCtI,QAAQC,IAAI,8BAA+B8L,GAE3C,MAAMC,KAAgBD,SAChBE,EAAYH,EAAUI,uBAAuB,aAC/CD,EAAU,GACVA,EAAU,GAAG/K,UAAY8K,EAEzBF,EAAUvK,mBAAmB,4DACuByK,YAExD5G,mBAGJ,SAASG,cAAczF,EAAUwI,GAC7B,MAAMzI,EAAO+C,mBAAmB9C,GAIhC,YAHgB8I,IAAZN,IACAA,EAAUzI,EAAKyI,SAED,SAAdzI,EAAKgD,KACEsJ,cAAc7D,GAEd8D,gBAAgBtM,GAI/B,SAASsM,gBAAgBC,GACrB,IAAIN,EAAO,EAUX,OATAnM,eAAe,SAAUC,EAAMC,EAAUC,EAAUuF,EAAc7C,GACzD6C,IAAiB+G,IAEbN,GADa,SAAbhM,EACQoM,cAActM,EAAKyI,SAEnB8D,gBAAgBtM,MAI7BiM,EAGX,SAASI,cAAc7D,GACnB,IAAIyD,EAAO,EACX,GAAIzD,EACA,IAAK,IAAI7H,EAAI,EAAGA,EAAI6H,EAAQ5H,OAAQD,IAAK,CACrC,MAAMqK,EAAOxC,EAAQ7H,GAEjB,uCAAuCsK,KAAKD,GAC5CiB,GAAQ,EAERA,GAAQ,EAIpB,OAAc,EAAPA,EAGX,SAASpB,wBAAwB2B,GAC7B,IAAIxC,EAAMwC,EACNC,EAAuB,EACvBC,EAAe1C,EAAI1G,QAAQ,MAE/B,KAAOoJ,GAAgB,GAAKD,EAAuBzC,EAAIpJ,WACnD8L,EAAe1C,EAAI1G,QAAQ,KAAMmJ,IACd,IAFwC,CAK3DvM,QAAQC,IAAI,gBAAkBuM,GAC9B,MAAMC,EAAczP,YAAcwP,EAAeD,GACjD,IAAIG,EAAS,GACb,IAAK,IAAIjM,EAAI,EAAGA,EAAIgM,EAAahM,IAC7BiM,GAAU,IAEd5C,EAAMA,EAAIlJ,MAAM,EAAG4L,GAAgBE,EAAS5C,EAAIlJ,MAAM4L,EAAe,GAErExM,QAAQC,IAAI,QAAU6J,GACtByC,EAAuBC,EAAeC,EACtCzM,QAAQC,IAAI,yBAA2BsM,GAE3C,OAAOzC,EAGX,SAASW,wBAAwB6B,GAC7B,IAAIxC,EAAMwC,EACN7J,EAAQzF,WAAa,EACzB,KAAOyF,EAAQqH,EAAIpJ,QACI,MAAfoJ,EAAIrH,IACJqH,EAAM6C,gBAAgB7C,EAAKrH,EAAO,GAClCA,MAEAqH,EAAMsB,gBAAgBtB,EAAKrH,EAAQ,EAAG,KAAM,GAC5CA,GAASzF,WAAa,GAG9B,OAAO8M,EAh8BXzJ,uBAGAmB,uBAEAjE,SAAS8L,uBAAuBjM,kBAAkB4G,aAAa,WAAW,GAC1EzG,SAASiH,iBAAiB,gCACrBC,QAASC,IACNA,EAAGtD,iBAAiB,SAAW2B,IAC3B3F,eAAiB2F,EAAEC,OAAOb,MAC1BX,uBACAxB,QAAQC,IAAI,gBAAiB8C,EAAEC,YAK3CtD,iBAAiB5B,cAcjB8D,yBAKAtE,aAAa8D,iBAAiB,QAAS,KACnCmB,eAAe,YAEnBiJ,UAAUC,KAAK,UAAY1I,IACvBzF,aAAaqO,SACN,IAIXlO,WAAW2D,iBAAiB,QAAS,KACjCmB,eAAe,UAEnBiJ,UAAUC,KAAK,UAAY1I,IACvBtF,WAAWkO,SACJ,IAIXjO,QAAQ0D,iBAAiB,QAAS,KAC9BxB,eAAe,SAAUC,EAAMC,EAAUC,EAAUuF,EAAc7C,GACzD3C,IAAa/B,UACbsD,YAAYiE,OAIxBkG,UAAUC,KAAK,YAAa,KACxB/N,QAAQiO,UAGZhO,SAASyD,iBAAiB,QAAS,KAE/BU,MACQC,MAAO,gBACPG,KAAM,6DACNgG,KAAM,UACNlG,SAAS,EACT4K,YAAY,IAEftK,KAAMuK,IACH,GAAIA,EAAY,CACZ/K,KAAK,wCACDoG,KAAM,UACNlG,SAAS,EACTmG,MAAO,MAMXnI,QAAQC,IAAI,gBAAiBlC,UAC7B,MAAM+O,KACNlN,eAAe,SAAUC,EAAMC,EAAUC,EAAUuF,EAAc7C,GAC7DzC,QAAQC,IAAI,oBAAqBqF,GACjCtF,QAAQC,IAAI,gBAAiBH,GACzBwF,EAAayH,WAAWhP,WACxB+O,EAAe5M,KAAKJ,KAG5BgN,EAAerI,QAAS5E,IACpBqH,sBAAsBrH,KAG1BoF,gBACArD,8BAqGhBrE,SAAS6D,iBAAiB,YAAa0B,oBAEvCvF,SAAS6D,iBAAiB,WAAY0B","file":"../../TextReader/js/script.js","sourcesContent":["// set up calculator type\r\nlet calculatorType = \"color\";\r\n// maximum lengths allowed because of screen size limitation\r\nlet\r\n    lineLength, rowLength, menuTitleLength, menuItemLength;\r\n// minimum length required, no empty string\r\nconst minMenuItemLength = 1;\r\nconst newFolderBtn = document.getElementById(\"newFolderBtn\");\r\nconst newFileBtn = document.getElementById(\"newFileBtn\");\r\nconst backBtn = document.getElementById(\"backBtn\");\r\nconst clearBtn = document.getElementById(\"clearBtn\");\r\nconst system = document.getElementById(\"system\");\r\nconst navigationBar = document.getElementById(\"navigationBar\");\r\nconst homePosition = \"home\";\r\nlet position = homePosition; // default root location for the file system\r\nconst itemNameList = [];\r\n// valid types of note items\r\nconst types = [\"file\", \"folder\", \"equation\", \"notebook\"];\r\nlet defaultToUppercase = true; // default auto convert to uppercase\r\nlet lastFileContent = \"\"; // file editor's previous content\r\nconst conversionTable = {\r\n    // greek letters\r\n    alpha: \"α\",\r\n    beta: \"β\",\r\n    gamma: \"γ\",\r\n    Delta: \"Δ\",\r\n    delta: \"δ\",\r\n    epsilon: \"ε\",\r\n    pi: \"π\",\r\n    lambda: \"λ\",\r\n    mu: \"μ\",\r\n    Omega: \"Ω\",\r\n    phat: \"p̂\",\r\n    Phi: \"Φ\",\r\n    rho: \"ρ\",\r\n    Sigma: \"Σ\",\r\n    sigma: \"σ\",\r\n    tau: \"τ\",\r\n\r\n    // other symbols\r\n    \"sqrt(\": \"√(\",\r\n    \"integral\": \"∫\",\r\n    \"<=\": \"≤\",\r\n    \">=\": \"≥\",\r\n    \"!=\": \"≠\",\r\n}\r\n\r\n// show item navigation bar\r\ndisplayNavigationBar();\r\n\r\n// manage calculator type selection\r\nchangeCalculatorType();\r\n\r\ndocument.querySelector(`input#${calculatorType}`).setAttribute(\"checked\", true);\r\ndocument.querySelectorAll('input[name=\"calculatorType\"]')\r\n    .forEach((el) => {\r\n        el.addEventListener(\"change\", (e) => {\r\n            calculatorType = e.target.value;\r\n            changeCalculatorType();\r\n            console.log('TCL: e.target', e.target);\r\n        })\r\n    });\r\n\r\n// load items from last time in localStorage\r\nupdateAtPosition(homePosition);\r\n\r\nfunction updateAtPosition(currentPosition) {\r\n    iterateStorage(function (item, itemName, itemType) {\r\n        console.log('TCL: updateAtPosition -> item', item);\r\n        if (item.position === currentPosition) { // only show ones at home position\r\n            itemNameList.push(itemName);\r\n            displayItem(itemName, itemType);\r\n            updateItemSize(itemName);\r\n        }\r\n    });\r\n}\r\n\r\n// Display file/folder placeholder (hint) in case home folder is empty\r\ndisplayItemPlaceholder();\r\n\r\n// set up buttons\r\n\r\n// button for creating a new folder\r\nnewFolderBtn.addEventListener(\"click\", () => {\r\n    createMenuItem(\"folder\");\r\n});\r\nMousetrap.bind(\"shift+f\", (e) => { // keyboard shortcut\r\n    newFolderBtn.click();\r\n    return false; // prevent event's default behavior\r\n});\r\n\r\n// button for creating a new file\r\nnewFileBtn.addEventListener(\"click\", () => {\r\n    createMenuItem(\"file\");\r\n});\r\nMousetrap.bind(\"shift+t\", (e) => { // keyboard shortcut\r\n    newFileBtn.click();\r\n    return false;\r\n});\r\n\r\n// moving back to parent folder\r\nbackBtn.addEventListener(\"click\", () => {\r\n    iterateStorage(function (item, itemName, itemType, itemPosition, index) {\r\n        if (itemName === position) {\r\n            setPosition(itemPosition);\r\n        }\r\n    })\r\n})\r\nMousetrap.bind(\"backspace\", () => {\r\n    backBtn.click();\r\n})\r\n\r\nclearBtn.addEventListener(\"click\", () => {\r\n    // Based on: https://sweetalert.js.org/guides/#getting-started\r\n    swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Once deleted, you will not be able to recover this folder!\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n                swal(\"All items are deleted in this folder\", {\r\n                    icon: \"success\",\r\n                    buttons: false,\r\n                    timer: 800,\r\n                });\r\n                // remove all items in current position (folder)\r\n                // itemNameList.forEach(item => {\r\n                //     removeItemFromStorage(item);\r\n                // });\r\n                console.log('TCL: position', position);\r\n                const removeItemList = [];\r\n                iterateStorage(function (item, itemName, itemType, itemPosition, index) {\r\n                    console.log('TCL: itemPosition', itemPosition);\r\n                    console.log('TCL: itemName', itemName);\r\n                    if (itemPosition.startsWith(position)) {\r\n                        removeItemList.push(itemName);\r\n                    }\r\n                });\r\n                removeItemList.forEach((item) => {\r\n                    removeItemFromStorage(item)\r\n                });\r\n                // clear the representation of items in the window\r\n                clearAllItems();\r\n                displayItemPlaceholder(); // show placeholder\r\n            }\r\n        });\r\n});\r\n\r\nfunction displayNavigationBar() {\r\n    removeAllChildren(navigationBar);\r\n    console.log('TCL: displayNavigationBar -> position', position);\r\n    const positions = position.split(\"/\");\r\n    for (let i = 0; i < positions.length; i++) {\r\n        createPositionLabel(positions.slice(0, i + 1).join(\"/\"));\r\n    }\r\n}\r\n\r\nfunction createPositionLabel(position) {\r\n    console.log('TCL: createPositionLabel -> position', position);\r\n    const positionLabel = document.createElement(\"span\");\r\n    positionLabel.classList.add(\"btn\");\r\n    positionLabel.classList.add(\"positionLabel\");\r\n    positionLabel.innerHTML = getEndOfActivePosition(position);\r\n    positionLabel.addEventListener(\"click\", () => {\r\n        setPosition(position);\r\n        console.log('TCL: createPositionLabel -> position', position);\r\n    });\r\n    navigationBar.appendChild(positionLabel);\r\n    positionLabel.insertAdjacentHTML(\"afterend\", `<i class=\"far fa-angle-right\"></i>`);\r\n}\r\n\r\nfunction changeCalculatorType() {\r\n    // set up variables for different calculators\r\n    switch (calculatorType) {\r\n        case \"monochrome\": // e.g. TI-83\r\n            lineLength = 16;\r\n            rowLength = 8;\r\n            break;\r\n        case \"color\": // e.g. TI-84/CSE/CE\r\n            lineLength = 26;\r\n            rowLength = 10;\r\n            break;\r\n    }\r\n    menuTitleLength = lineLength;\r\n    menuItemLength = lineLength - 2;\r\n}\r\n\r\nfunction removeItemPlaceholder() {\r\n    let placeholder = document.getElementById(\"newItemPlaceholder\");\r\n    if (placeholder) { // remove previous placeholder\r\n        placeholder.remove();\r\n    }\r\n}\r\n\r\nfunction displayItemPlaceholder() {\r\n    removeItemPlaceholder();\r\n    if (itemNameList.length === 0) {\r\n        const placeholder = document.createElement(\"p\");\r\n        placeholder.id = \"newItemPlaceholder\";\r\n        placeholder.classList.add(\"btn\");\r\n        placeholder.innerHTML = \"Create a New File or Folder\";\r\n        placeholder.addEventListener(\"click\", () => {\r\n            swal({\r\n                    title: \"Create a file or folder?\",\r\n                    buttons: {\r\n                        file: {\r\n                            text: \"File\",\r\n                            value: \"file\",\r\n                            className: \"blurred centered\",\r\n                        },\r\n                        folder: {\r\n                            text: \"Folder\",\r\n                            value: \"folder\",\r\n                            className: \"blurred centered\",\r\n                        },\r\n                    },\r\n                })\r\n                .then((value) => {\r\n                    console.log('TCL: displayNewItemPlaceholder -> value', value);\r\n                    if (value) {\r\n                        createMenuItem(value);\r\n                    }\r\n                });\r\n        });\r\n        system.appendChild(placeholder);\r\n    }\r\n}\r\n\r\n// iterate through storage for access\r\n// DO NOT DELETE ANY ITEMS IN STORAGE, THIS WILL MESS UP THE LOOP INDEX!!!\r\nfunction iterateStorage(func) {\r\n    for (let index = 0; index < localStorage.length; index++) {\r\n        const itemName = localStorage.key(index);\r\n        const item = getItemFromStorage(itemName);\r\n        func(item, itemName, item.type, item.position, index);\r\n    }\r\n}\r\n\r\nfunction toggleBtnHighlight(e) {\r\n    if (e.target.classList.contains(\"btn\")) {\r\n        e.target.classList.toggle(\"btn-hover\");\r\n    }\r\n}\r\n\r\ndocument.addEventListener(\"mouseover\", toggleBtnHighlight)\r\n\r\ndocument.addEventListener(\"mouseout\", toggleBtnHighlight)\r\n\r\nfunction createMenuItem(type) {\r\n    removeItemPlaceholder();\r\n    type = type.toLowerCase();\r\n    if (types.indexOf(type) < 0) {\r\n        throw new TypeError(`menu item's type should be either folder or file, not ${type}`);\r\n    }\r\n    const itemNameInput = createItemNameInput(type);\r\n    itemNameInput.addEventListener('keypress', (e) => {\r\n        if (e.keyCode == 13) { // ENTER key\r\n            const shortItemName = itemNameInput.value.trim();\r\n            const fullItemName = getFullItemName(shortItemName);\r\n            if (shortItemName.length >= minMenuItemLength) {\r\n                if (type === \"folder\" && shortItemName.indexOf(\"\\\\\") >= 0) {\r\n                    createErrorMessage(itemNameInput,\r\n                        `Folder name cannot contain \"\\\\\"`);\r\n                } else if (itemNameList.indexOf(fullItemName) >= 0) { // repeated name\r\n                    createErrorMessage(itemNameInput,\r\n                        `Duplicated ${type} name, ${type} name must be unique`);\r\n                } else {\r\n                    itemNameList.push(fullItemName);\r\n                    displayItem(fullItemName, type, itemNameInput);\r\n                    storeNewItem(itemNameInput, type, position);\r\n                    // remove item name input\r\n                    itemNameInput.remove();\r\n                }\r\n            } else {\r\n                createErrorMessage(itemNameInput, `${type} name can't be empty`);\r\n            }\r\n        }\r\n    });\r\n    system.appendChild(itemNameInput);\r\n    itemNameInput.focus();\r\n}\r\n\r\nfunction getFullItemName(shortItemName) {\r\n    return `${position}/${shortItemName}`;\r\n}\r\n\r\n// Create input box for entering name of the file or folder\r\nfunction createItemNameInput(type) {\r\n    const itemNameInput = document.createElement(\"input\");\r\n    itemNameInput.setAttribute(\"type\", \"text\");\r\n    itemNameInput.placeholder = `Enter ${type} name here`;\r\n    // minLength must be detected in ENTER key press event\r\n    itemNameInput.maxLength = menuItemLength;\r\n    itemNameInput.spellcheck = false;\r\n    itemNameInput.classList.add(\"itemNameInput\");\r\n    itemNameInput.style.display = \"block\";\r\n    itemNameInput.style.marginTop = \".5em\";\r\n    itemNameInput.style.marginBottom = \".5em\";\r\n    return itemNameInput;\r\n}\r\n\r\nfunction createErrorMessage(target, message) {\r\n    console.log('TCL: createErrorMessage -> target', target);\r\n    console.log('TCL: createErrorMessage -> typeof target', typeof target);\r\n    // delete all previous error message\r\n    document.querySelectorAll(\".error\").forEach(\r\n        el => {\r\n            el.remove();\r\n        }\r\n    )\r\n    const popup = document.createElement(\"span\");\r\n    popup.innerHTML = message;\r\n    popup.classList.add(\"error\");\r\n    target.addEventListener(\"input\", () => {\r\n        popup.remove(); // delete itself when new input appears\r\n    });\r\n    insertAfter(target, popup);\r\n}\r\n\r\nfunction storeNewItem(itemNameInput, type, position) {\r\n    console.log('TCL: storeNewItem -> storeNewItem');\r\n    // store new item with the inputed name\r\n    const itemInfo = {\r\n        \"position\": position,\r\n        \"type\": type\r\n    };\r\n    const itemName = `${position}/${itemNameInput.value}`;\r\n    console.log('TCL: storeNewItem -> itemName', itemName);\r\n    setItemInStorage(itemName, itemInfo);\r\n    switch (type) {\r\n        case \"file\":\r\n            openFileEditField(itemName, itemInfo);\r\n            break;\r\n        case \"equation\":\r\n            openEquationEditField(itemName, itemInfo);\r\n            break;\r\n    }\r\n    return itemName;\r\n}\r\n\r\n// remove all labels of items and delete them in current item name list\r\n// DOES NOT REMOVE FROM STORAGE!!!\r\nfunction clearAllItems() {\r\n    removeAllChildren(system); // delete all children in system div\r\n    itemNameList.length = 0; // clear the current item list\r\n}\r\n\r\nfunction appendPosition(newPosition) {\r\n    setPosition(`${position}/${newPosition}`);\r\n}\r\n\r\n// set the current position (folder)\r\nfunction setPosition(newPosition) {\r\n    position = newPosition;\r\n    clearAllItems();\r\n    updateAtPosition(newPosition);\r\n    displayNavigationBar();\r\n    displayItemPlaceholder();\r\n    displayTotalSize();\r\n}\r\n\r\nfunction displayTotalSize() {\r\n    let totalSize = 0;\r\n    iterateStorage(function (item, itemName, itemType, itemPosition) {\r\n        if (itemPosition === position) {\r\n            totalSize += countItemSize(itemName);\r\n        }\r\n    });\r\n    const tools = document.getElementById(\"tools\");\r\n    let totalSizeLabel = document.getElementById(\"totalSizeLabel\");\r\n    if (!totalSizeLabel) {\r\n        totalSizeLabel = document.createElement(\"span\");\r\n        totalSizeLabel.id = \"totalSizeLabel\";\r\n        tools.appendChild(totalSizeLabel);\r\n    }\r\n    totalSizeLabel.innerText = `${totalSize} bits`;\r\n}\r\n\r\n// retrieve the item name from its full position path\r\n// e.g. itemName = \"home/folder1/file1\"\r\n// returns \"file1\"\r\n// item must be at the current position!!!\r\nfunction getEndOfActivePosition(itemName) {\r\n    let endPosition = itemName.substring(position.length + 1); // when item is NOT a folder\r\n    if (endPosition === \"\") { // when item is a folder and itemName === position\r\n        return itemName.substring(itemName.lastIndexOf(\"/\") + 1);\r\n    } else {\r\n        return endPosition;\r\n    }\r\n}\r\n\r\n// display item labels\r\nfunction displayItem(itemName, itemType, itemPosition) {\r\n    // replace input with label\r\n    const itemLabel = document.createElement(\"p\");\r\n    const itemInfo = getItemFromStorage(itemName);\r\n    const displayedName = getEndOfActivePosition(itemName);\r\n    let itemLabelText = \"\";\r\n    if (itemType === \"file\") {\r\n        itemLabelText = `📝`;\r\n    } else if (itemType === \"folder\") {\r\n        itemLabelText = `📁`;\r\n    } else if (itemType === \"equation\") {\r\n        itemLabelText = `<i class=\"far fa-calculator\"></i>`;\r\n    }\r\n\r\n    // append item name\r\n    itemLabelText += displayedName;\r\n\r\n    // add link sign to indicate that the item is linked with another\r\n    if (itemInfo && itemInfo.link) {\r\n        itemLabelText += `<i class=\"far fa-link\"></i>`;\r\n    }\r\n\r\n    itemLabel.innerHTML = itemLabelText;\r\n\r\n    itemLabel.classList.add(itemType);\r\n    itemLabel.classList.add(\"btn\");\r\n    itemLabel.classList.add(\"item\");\r\n    itemLabel.setAttribute(\"data-name\", itemName);\r\n    itemLabel.addEventListener(\"click\", () => {\r\n        const itemInfo = getItemFromStorage(itemName);\r\n        const editField = document.getElementById(\"editField\");\r\n        if (editField) { // has previous item's editor open\r\n            const previousItemName = editField.getAttribute(\"data-item\");\r\n            storeItem(previousItemName);\r\n        }\r\n        if (itemType === \"file\") {\r\n            displayFile(itemLabel, itemName, itemInfo);\r\n        } else if (itemType === \"folder\") {\r\n            // set item location to the folder\r\n            console.log('TCL: displayItem -> position', position);\r\n            if (getItemFromStorage(itemName)) {\r\n                setPosition(itemName);\r\n            } else {\r\n                appendPosition(itemName);\r\n            }\r\n            console.log('TCL: displayItem -> position', position);\r\n        } else if (itemType === \"equation\") {\r\n            displayEquation(itemLabel, itemName, itemInfo);\r\n        }\r\n    });\r\n    // console.log(\"displaying item...\");\r\n    if (itemPosition) {\r\n        console.log('TCL: displayItem -> position', itemPosition);\r\n        insertAfter(itemPosition, itemLabel);\r\n    } else {\r\n        system.appendChild(itemLabel);\r\n    }\r\n}\r\n\r\nfunction storeItem(itemName) {\r\n    console.log('TCL: storeItem -> itemName', itemName);\r\n    const item = getItemFromStorage(itemName);\r\n    console.log('TCL: storeItem -> item', item);\r\n    if (item) { // item exists\r\n        const itemType = item.type;\r\n        console.log('TCL: storeItem -> itemType', itemType);\r\n        switch (itemType) {\r\n            case \"file\":\r\n                storeFile(itemName, item);\r\n                break;\r\n            case \"equation\":\r\n                storeEquation(itemName, item);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction createFileEditor(id) {\r\n    const editor = document.createElement(\"textarea\");\r\n    if (id) {\r\n        editor.id = id;\r\n    } else {\r\n        editor.id = \"editor\";\r\n    }\r\n    editor.classList.add(\"editor\");\r\n    editor.setAttribute(\"data-type\", \"file\");\r\n    editor.rows = rowLength;\r\n    // NOTE: cols are one character bigger than actual calculator's\r\n    // line lengths because that's the space for vertical scroll bar\r\n    editor.cols = lineLength + 1;\r\n    editor.spellcheck = false;\r\n    return editor;\r\n}\r\n\r\nfunction displayFile(position, fileName, fileInfo) {\r\n    // toggle file editor\r\n    const editField = document.getElementById(\"editField\");\r\n    if (editField) {\r\n        editField.remove();\r\n        const clickedItemName = editField.getAttribute(\"data-item\");\r\n        if (clickedItemName !== fileName) { // not the same file\r\n            displayFile(position, fileName, fileInfo);\r\n        }\r\n    } else {\r\n        openFileEditField(fileName, fileInfo, position);\r\n    }\r\n}\r\n\r\nfunction deleteItem(itemLabel) {\r\n    const itemType = getItemLabelType(itemLabel);\r\n    if (itemType === \"notebook\") {\r\n        removeNotebook(itemLabel);\r\n    } else {\r\n        const itemName = itemLabel.getAttribute(\"data-name\");\r\n        // remove item in storage\r\n        if (itemName) {\r\n            removeItemFromStorage(itemName);\r\n            removeElementInArray(itemNameList, itemName);\r\n            removeLink(itemName);\r\n        }\r\n        // update total size\r\n        displayTotalSize();\r\n        // remove item label\r\n        itemLabel.remove();\r\n        // remove associated edit field\r\n        const editField = document.getElementById(\"editField\");\r\n        if (editField && editField.getAttribute(\"data-item\") === itemName) {\r\n            editField.remove();\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeLink(linkedItemName) {\r\n    iterateStorage(function (item, itemName) {\r\n        const itemLink = item.link;\r\n        if (itemLink === linkedItemName) {\r\n            delete item.link;\r\n            setItemInStorage(itemName, item);\r\n        }\r\n    })\r\n}\r\n\r\nfunction renameItem(itemLabel) {\r\n    const itemType = getItemLabelType(itemLabel);\r\n    if (itemType === \"notebook\") {\r\n        renameNotebook(itemLabel);\r\n    } else {\r\n        const oldItemName = itemLabel.getAttribute(\"data-name\");\r\n        if (oldItemName) {\r\n            const item = getItemFromStorage(oldItemName);\r\n            const type = item.type;\r\n            const itemNameInput = createItemNameInput(type);\r\n            itemNameInput.value = getEndOfActivePosition(oldItemName);\r\n            insertAfter(itemLabel, itemNameInput);\r\n            itemNameInput.focus();\r\n            console.log('TCL: renameItem -> itemLabel', itemLabel);\r\n            console.log('TCL: renameItem -> itemLabel.parentNode', itemLabel.parentNode);\r\n            itemLabel.remove();\r\n            itemNameInput.addEventListener(\"keypress\", (e) => {\r\n                const shortItemName = itemNameInput.value.trim();\r\n                const fullItemName = getFullItemName(shortItemName);\r\n                if (shortItemName.length >= minMenuItemLength) {\r\n                    if (type === \"folder\" && shortItemName.indexOf(\"\\\\\") >= 0) {\r\n                        createErrorMessage(itemNameInput,\r\n                            `Folder name cannot contain \"\\\\\"`);\r\n                    } else if (e.keyCode == 13) { // ENTER key\r\n                        if (itemNameList.indexOf(fullItemName) >= 0 && fullItemName !== oldItemName) { // repeated name\r\n                            createErrorMessage(itemNameInput,\r\n                                `Duplicated ${type} name, ${type} name must be unique`);\r\n                        } else {\r\n                            replaceElementInArray(itemNameList, oldItemName, fullItemName);\r\n                            renameItemInStorage(oldItemName, fullItemName);\r\n                            displayItem(fullItemName, type, itemNameInput);\r\n                            // remove item name input\r\n                            itemNameInput.remove();\r\n                        }\r\n                    }\r\n                } else {\r\n                    createErrorMessage(itemNameInput, `${type} name can't be empty`);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction pinToHome(itemLabel) {\r\n    const originalItemName = itemLabel.getAttribute(\"data-name\");\r\n    const originalItemType = getItemFromStorage(originalItemName).type;\r\n    console.log('TCL: pinToHome -> itemName', originalItemName);\r\n    swal({\r\n            title: \"Give the pinned item a name\",\r\n            buttons: {\r\n                sameName: {\r\n                    text: \"Same Name\",\r\n                    value: \"sameName\",\r\n                },\r\n                newName: {\r\n                    text: \"New Name\",\r\n                    value: \"newName\",\r\n                },\r\n                cancel: \"Cancel\",\r\n            },\r\n        })\r\n        .then((value) => {\r\n            switch (value) {\r\n                case \"sameName\":\r\n                    swal(\"Pinned to home!\", {\r\n                        icon: \"success\",\r\n                        buttons: false,\r\n                        timer: 800,\r\n                    });\r\n                    linkItemToHome(originalItemName);\r\n                    break;\r\n\r\n                case \"newName\":\r\n                    askForNewLinkedName(originalItemName, originalItemType);\r\n                    break;\r\n            }\r\n        });\r\n}\r\n\r\nfunction askForNewLinkedName(originalItemName, originalItemType) {\r\n    swal({\r\n            title: \"Enter New Name: \",\r\n            content: {\r\n                element: \"input\",\r\n                attributes: {\r\n                    type: \"text\",\r\n                    maxLength: lineLength,\r\n                    spellcheck: false,\r\n                },\r\n            },\r\n        })\r\n        .then((newItemName) => {\r\n            console.log('TCL: askForNewLinkedName -> newItemName', newItemName);\r\n            swal(`${newItemName} pinned to home!`, {\r\n                icon: \"success\",\r\n                buttons: false,\r\n                timer: 800,\r\n            });\r\n            linkItemToHome(originalItemName, newItemName);\r\n        });\r\n}\r\n\r\nfunction linkItemToHome(originalItemName, shortlinkedItemName) {\r\n    console.log('TCL: linkItemToHome -> shortlinkedItemName', shortlinkedItemName);\r\n    const originalItem = getItemFromStorage(originalItemName);\r\n    console.log('TCL: linkItemToHome -> originalItem', originalItem);\r\n    if (shortlinkedItemName === undefined) {\r\n        shortlinkedItemName = getEndOfActivePosition(originalItemName);\r\n    }\r\n    const linkedItemName = `home/${shortlinkedItemName}`;\r\n    console.log('TCL: pinToHome -> newItemName', linkedItemName);\r\n    const itemNameList = getItemNamesAtPosition(homePosition);\r\n    if (itemNameList.indexOf(linkedItemName) >= 0 || shortlinkedItemName === \"\") {\r\n        let alertTitle = \"Duplicated Item Name!\";\r\n        console.log('TCL: linkItemToHome -> shortlinkedItemName', shortlinkedItemName);\r\n        if (shortlinkedItemName === \"\") { // empty name\r\n            alertTitle = \"Item name cannot be empty!\";\r\n        }\r\n        // duplicated name at home\r\n        swal({\r\n            title: alertTitle,\r\n            icon: \"warning\",\r\n            button: \"OK\",\r\n        }).then(() => {\r\n            // Ask for new item name\r\n            askForNewLinkedName(originalItemName, shortlinkedItemName);\r\n        });\r\n        throw new Error(\"Invalid item name\"); // stop program execution\r\n    }\r\n    console.log(\"linking the items...\");\r\n    const linkedItem = clone(originalItem); // must clone to not modify original\r\n    console.log('TCL: linkItemToHome -> linkedItem', linkedItem);\r\n    // set position to home\r\n    linkedItem.position = homePosition;\r\n    linkedItem.link = originalItemName;\r\n    console.log('TCL: linkItemToHome -> linkedItem', linkedItem);\r\n    // store linked item at home position\r\n    setItemInStorage(linkedItemName, linkedItem);\r\n    // modify original item\r\n    originalItem.link = linkedItemName;\r\n    setItemInStorage(originalItemName, originalItem);\r\n    // add link sign by updating current position\r\n    setPosition(position);\r\n}\r\n\r\nfunction getItemNamesAtPosition(position) {\r\n    const itemNameList = [];\r\n    iterateStorage(function (item, itemName) {\r\n        if (item.position === position) {\r\n            itemNameList.push(itemName);\r\n        }\r\n    });\r\n    return itemNameList;\r\n}\r\n\r\nfunction restrictContextItems(itemLabel) {\r\n    const pinToHomeBtn = document.querySelector(`li.context-menu__item[data-action=\"pinToHome\"`);\r\n    const itemName = itemLabel.getAttribute(\"data-name\");\r\n    const itemType = getItemLabelType(itemLabel);\r\n    console.log('TCL: restrictContextItems -> itemType', itemType);\r\n    if (pinToHomeBtn) {\r\n        if (position === homePosition || itemType === \"folder\" || itemType === \"notebook\") {\r\n            pinToHomeBtn.style.display = \"none\";\r\n        } else {\r\n            pinToHomeBtn.style.display = \"block\";\r\n        }\r\n    }\r\n}\r\n\r\nfunction getItemLabelType(itemLabel) {\r\n    console.log('TCL: getItemLabelType -> itemLabel', itemLabel);\r\n    let itemType;\r\n    types.forEach(type => {\r\n        console.log('TCL: getItemLabelType -> type', type);\r\n        if (itemLabel.classList.contains(type)) {\r\n            itemType = type;\r\n            return;\r\n        }\r\n    });\r\n    if (itemType === undefined) {\r\n        throw new Error(\"Unknown item type!\");\r\n    }\r\n    return itemType;\r\n}\r\n\r\nfunction renameItemInStorage(oldItemName, newItemName) {\r\n    const item = getItemFromStorage(oldItemName);\r\n    removeItemFromStorage(oldItemName);\r\n    setItemInStorage(newItemName, item);\r\n}\r\n\r\nfunction removeItemFromStorage(itemName) {\r\n    localStorage.removeItem(itemName);\r\n}\r\n\r\nfunction getItemFromStorage(itemName) {\r\n    return JSON.parse(localStorage.getItem(itemName));\r\n}\r\n\r\nfunction setItemInStorage(itemName, item) {\r\n    // store item itself\r\n    localStorage.setItem(itemName, JSON.stringify(item));\r\n    // update linked item\r\n    if (item.link) {\r\n        const linkedItemName = item.link;\r\n        console.log('TCL: setItemInStorage -> linkedItemName', linkedItemName);\r\n        const linkedItem = clone(item);\r\n        const storedLinkedItem = getItemFromStorage(linkedItemName);\r\n        if (storedLinkedItem) {\r\n            linkedItem.position = storedLinkedItem.position;\r\n            linkedItem.link = itemName;\r\n            localStorage.setItem(linkedItemName, JSON.stringify(linkedItem));\r\n        }\r\n    }\r\n}\r\n\r\nfunction convertWordsToSymbols(str) {\r\n    for (const [key, value] of Object.entries(conversionTable)) {\r\n        str = str.replace(new RegExp(RegExp.escape(\"\\\\\" + key), \"g\"), value);\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction convertSymbolsToWords(str) {\r\n    for (const [key, value] of Object.entries(conversionTable)) {\r\n        str = str.replace(new RegExp(RegExp.escape(value), \"g\"), \"\\\\\" + key);\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction convertSingleQuotesToDoubleQuotes(str) {\r\n    return str.replace(new RegExp(`'`, \"g\"), `\"`);\r\n}\r\n\r\nfunction convertDoubleQuotesToSingleQuotes(str) {\r\n    return str.replace(new RegExp(`\"`, \"g\"), `'`);\r\n}\r\n\r\nfunction decodeFileContent(fileContent) {\r\n    let content = convertSpacesToNewlines(fileContent);\r\n    content = convertWordsToSymbols(content);\r\n    content = convertSingleQuotesToDoubleQuotes(content);\r\n    return content;\r\n}\r\n\r\nfunction encodeFileContent(fileContent) {\r\n    let content = convertNewlinesToSpaces(fileContent);\r\n    // double quotes cannot be in TI-BASIC's strings\r\n    content = convertDoubleQuotesToSingleQuotes(content);\r\n    return content;\r\n}\r\n\r\nfunction convertToUppercase(str) {\r\n    let result = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        const char = str[i];\r\n        if (/^[a-zA-Z]*$/.test(char)) {\r\n            result += char.toUpperCase();\r\n        } else {\r\n            result += char;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction openFileEditField(itemName, itemInfo, position) {\r\n    const editor = createFileEditor();\r\n    editor.placeholder = \"Write notes here\"\r\n    toUppercase = defaultToUppercase; // reset uppercase setting\r\n    if (itemInfo.content !== undefined) {\r\n        editor.value = decodeFileContent(itemInfo.content);\r\n        editor.setAttribute(\"data-item\", itemName);\r\n        if (/[a-z]+/.test(editor.value)) { // contains lowercase\r\n            // turn off to uppercase\r\n            toUppercase = false;\r\n        }\r\n    }\r\n    editor.addEventListener(\"input\", () => {\r\n        let content = editor.value;\r\n        // content conversion\r\n        content = convertWordsToSymbols(content);\r\n        if (toUppercase && content.indexOf(\"\\\\\") < 0) {\r\n            content = convertToUppercase(content);\r\n        }\r\n\r\n        // update file size label\r\n        updateItemSize(itemName, content);\r\n\r\n        console.log('TCL: openFileEditField -> content', content);\r\n        // pasting in more than one line of content\r\n        if (content.length - lastFileContent.length > lineLength) {\r\n            let start = lastFileContent.lastIndexOf(\"\\n\");\r\n            for (let end = 0; end < content.length; end++) {\r\n                if (end - start === lineLength) {\r\n                    content = insertSubstring(content, end + 1, \"\\n\");\r\n                    end++; // move to the newly inserted \"\\n\"\r\n                    start = end;\r\n                }\r\n            }\r\n        } else if (content.length >= lastFileContent.length) { // typing individual characters\r\n            const lastLineLength = content.length - content.lastIndexOf(\"\\n\") - 1;\r\n            console.log('TCL: openFileEditField -> lastLineLength', lastLineLength);\r\n            if (lastLineLength > lineLength) {\r\n                content = insertSubstring(content, content.length - 1, \"\\n\", 0); // avoid word wrapping\r\n            }\r\n            console.log('TCL: openFileEditField -> content.length', content.length);\r\n        }\r\n        editor.value = content;\r\n        lastFileContent = content;\r\n    });\r\n\r\n    const controlDiv = document.createElement(\"div\");\r\n    controlDiv.id = \"editFieldControl\";\r\n\r\n    const submitBtn = document.createElement(\"span\");\r\n    submitBtn.id = \"submitFileBtn\";\r\n    submitBtn.classList.add(\"btn\");\r\n    submitBtn.innerHTML = \"Submit\";\r\n    submitBtn.addEventListener(\"click\", () => {\r\n        storeFile(itemName, itemInfo);\r\n        editField.remove();\r\n    });\r\n    Mousetrap(editor).bind('mod+s', function (e, combo) {\r\n        submitBtn.click();\r\n        return false; // prevent event's default behavior\r\n    });\r\n    const editField = document.createElement(\"div\");\r\n    editField.id = \"editField\";\r\n    editField.setAttribute(\"data-item\", itemName);\r\n    if (position === undefined) {\r\n        system.appendChild(editField);\r\n    } else {\r\n        insertAfter(position, editField);\r\n    }\r\n    editField.appendChild(editor);\r\n    editField.appendChild(controlDiv);\r\n    controlDiv.appendChild(submitBtn);\r\n\r\n    // add uppercase checkbox and info button\r\n    controlDiv.insertAdjacentHTML(\"beforeend\",\r\n        `<div id=\"uppercaseDiv\">\r\n            <input type=\"checkbox\" id=\"uppercaseCheckBox\">\r\n            <label for=\"uppercaseCheckBox\">Uppercase</label>\r\n            <i class=\"far fa-info-circle infoBtn\" id=\"uppercaseInfoBtn\"></i>\r\n        </div>`);\r\n    const uppercaseCheckBox = document.getElementById(\"uppercaseCheckBox\");\r\n    uppercaseCheckBox.checked = toUppercase;\r\n    uppercaseCheckBox.addEventListener(\"change\", () => {\r\n        if (uppercaseCheckBox.checked !== toUppercase) {\r\n            toUppercase = uppercaseCheckBox.checked;\r\n            editor.value = convertToUppercase(editor.value);\r\n        }\r\n    });\r\n    const uppercaseInfoBtn = document.getElementById(\"uppercaseInfoBtn\");\r\n    uppercaseInfoBtn.addEventListener(\"click\", () => {\r\n        swal({\r\n            title: \"Why does the text need to be in uppercase?\",\r\n            text: `1. Some lowercase words are predefined as keywords, like \"and\", \"sin(\", etc. in TI. Thus, their length cannot be accurately determined because keywords all occupy one space in TI. This can mess up note layout and hide some parts of the note. \r\n            2. Uppercase letters (1 byte each) take up less spaces than lowercase letters (2 bytes each).\r\n            Sugguestion: You should stick with uppercase in all your notes.`,\r\n            buttons: \"okay\",\r\n        });\r\n    });\r\n    editor.focus();\r\n}\r\n\r\nfunction storeFile(itemName, itemInfo) {\r\n    let content = document.getElementById(\"editor\").value;\r\n    console.log('TCL: storeFile -> content', content);\r\n    content = encodeFileContent(content);\r\n    itemInfo.content = content;\r\n    setItemInStorage(itemName, itemInfo);\r\n    // update file size\r\n    updateItemSize(itemName, content);\r\n}\r\n\r\nfunction updateItemSize(itemName, content) {\r\n    const fileLabel = document.querySelector(`p[data-name=\"${itemName}\"]`);\r\n    const size = countItemSize(itemName, content);\r\n    console.log('TCL: updateFileSize -> size', size);\r\n    // remove previous label\r\n    const sizeString = `${size} bits`;\r\n    const sizeLabel = fileLabel.getElementsByClassName(\"sizeLabel\");\r\n    if (sizeLabel[0]) {\r\n        sizeLabel[0].innerHTML = sizeString;\r\n    } else {\r\n        fileLabel.insertAdjacentHTML(\"beforeend\",\r\n            `<span style=\"float:right;\" class=\"sizeLabel\">${sizeString}</span>`);\r\n    }\r\n    displayTotalSize();\r\n}\r\n\r\nfunction countItemSize(itemName, content) {\r\n    const item = getItemFromStorage(itemName);\r\n    if (content === undefined) {\r\n        content = item.content;\r\n    }\r\n    if (item.type === \"file\") {\r\n        return countFileSize(content);\r\n    } else {\r\n        return countFolderSize(itemName);\r\n    }\r\n}\r\n\r\nfunction countFolderSize(folderName) {\r\n    let size = 0;\r\n    iterateStorage(function (item, itemName, itemType, itemPosition, index) {\r\n        if (itemPosition === folderName) {\r\n            if (itemType === \"file\") {\r\n                size += countFileSize(item.content);\r\n            } else {\r\n                size += countFolderSize(itemName);\r\n            }\r\n        }\r\n    });\r\n    return size;\r\n}\r\n\r\nfunction countFileSize(content) {\r\n    let size = 0;\r\n    if (content) { // content exists\r\n        for (let i = 0; i < content.length; i++) {\r\n            const char = content[i];\r\n            // one-byte characters\r\n            if (/[0-9A-Z{}()[\\],.!?+\\-*\\/^:=<>≤≥≠π√ ]/.test(char)) {\r\n                size += 1;\r\n            } else { // all other symbols are two-bytes\r\n                size += 2;\r\n            }\r\n        }\r\n    }\r\n    return size * 8; // convert bytes to bits\r\n}\r\n\r\nfunction convertNewlinesToSpaces(inputStr) {\r\n    let str = inputStr;\r\n    let previousNewlineIndex = 0;\r\n    let newlineIndex = str.indexOf(\"\\n\");\r\n    // substitute newlines with spaces\r\n    while (newlineIndex >= 0 && previousNewlineIndex < str.length) {\r\n        newlineIndex = str.indexOf(\"\\n\", previousNewlineIndex);\r\n        if (newlineIndex < 0) {\r\n            break;\r\n        }\r\n        console.log('newlineIndex:' + newlineIndex);\r\n        const numOfSpaces = lineLength - (newlineIndex - previousNewlineIndex);\r\n        let spaces = \"\";\r\n        for (let i = 0; i < numOfSpaces; i++) {\r\n            spaces += \" \";\r\n        }\r\n        str = str.slice(0, newlineIndex) + spaces + str.slice(newlineIndex + 1);\r\n        // str = insertString(str, newlineIndex, spaces, 1);\r\n        console.log(\"str: \" + str);\r\n        previousNewlineIndex = newlineIndex + numOfSpaces;\r\n        console.log(\"previousNewlineIndex: \" + previousNewlineIndex)\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction convertSpacesToNewlines(inputStr) {\r\n    let str = inputStr;\r\n    let index = lineLength - 1;\r\n    while (index < str.length) {\r\n        if (str[index] === \" \") {\r\n            str = deleteSubstring(str, index, 1);\r\n            index--;\r\n        } else {\r\n            str = insertSubstring(str, index + 1, \"\\n\", 0);\r\n            index += lineLength + 1;\r\n        }\r\n    }\r\n    return str;\r\n}"]}